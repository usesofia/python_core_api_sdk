# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from python_core_api_sdk.models.base_model import Model
from python_core_api_sdk import util


class CreateProfileRequestDto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, full_name: str=None, phone: str=None, birth_date: datetime=None):
        """CreateProfileRequestDto - a model defined in OpenAPI

        :param full_name: The full_name of this CreateProfileRequestDto.
        :param phone: The phone of this CreateProfileRequestDto.
        :param birth_date: The birth_date of this CreateProfileRequestDto.
        """
        self.openapi_types = {
            'full_name': str,
            'phone': str,
            'birth_date': datetime
        }

        self.attribute_map = {
            'full_name': 'fullName',
            'phone': 'phone',
            'birth_date': 'birthDate'
        }

        self._full_name = full_name
        self._phone = phone
        self._birth_date = birth_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateProfileRequestDto':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateProfileRequestDto of this CreateProfileRequestDto.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def full_name(self):
        """Gets the full_name of this CreateProfileRequestDto.


        :return: The full_name of this CreateProfileRequestDto.
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this CreateProfileRequestDto.


        :param full_name: The full_name of this CreateProfileRequestDto.
        :type full_name: str
        """
        if full_name is None:
            raise ValueError("Invalid value for `full_name`, must not be `None`")

        self._full_name = full_name

    @property
    def phone(self):
        """Gets the phone of this CreateProfileRequestDto.


        :return: The phone of this CreateProfileRequestDto.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this CreateProfileRequestDto.


        :param phone: The phone of this CreateProfileRequestDto.
        :type phone: str
        """
        if phone is None:
            raise ValueError("Invalid value for `phone`, must not be `None`")

        self._phone = phone

    @property
    def birth_date(self):
        """Gets the birth_date of this CreateProfileRequestDto.


        :return: The birth_date of this CreateProfileRequestDto.
        :rtype: datetime
        """
        return self._birth_date

    @birth_date.setter
    def birth_date(self, birth_date):
        """Sets the birth_date of this CreateProfileRequestDto.


        :param birth_date: The birth_date of this CreateProfileRequestDto.
        :type birth_date: datetime
        """
        if birth_date is None:
            raise ValueError("Invalid value for `birth_date`, must not be `None`")

        self._birth_date = birth_date
