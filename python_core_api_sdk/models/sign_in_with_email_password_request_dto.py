# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from python_core_api_sdk.models.base_model import Model
from python_core_api_sdk import util


class SignInWithEmailPasswordRequestDto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email: str=None, password: str=None, client_id: str=None):
        """SignInWithEmailPasswordRequestDto - a model defined in OpenAPI

        :param email: The email of this SignInWithEmailPasswordRequestDto.
        :param password: The password of this SignInWithEmailPasswordRequestDto.
        :param client_id: The client_id of this SignInWithEmailPasswordRequestDto.
        """
        self.openapi_types = {
            'email': str,
            'password': str,
            'client_id': str
        }

        self.attribute_map = {
            'email': 'email',
            'password': 'password',
            'client_id': 'clientId'
        }

        self._email = email
        self._password = password
        self._client_id = client_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SignInWithEmailPasswordRequestDto':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SignInWithEmailPasswordRequestDto of this SignInWithEmailPasswordRequestDto.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email(self):
        """Gets the email of this SignInWithEmailPasswordRequestDto.


        :return: The email of this SignInWithEmailPasswordRequestDto.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this SignInWithEmailPasswordRequestDto.


        :param email: The email of this SignInWithEmailPasswordRequestDto.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def password(self):
        """Gets the password of this SignInWithEmailPasswordRequestDto.


        :return: The password of this SignInWithEmailPasswordRequestDto.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this SignInWithEmailPasswordRequestDto.


        :param password: The password of this SignInWithEmailPasswordRequestDto.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")

        self._password = password

    @property
    def client_id(self):
        """Gets the client_id of this SignInWithEmailPasswordRequestDto.


        :return: The client_id of this SignInWithEmailPasswordRequestDto.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this SignInWithEmailPasswordRequestDto.


        :param client_id: The client_id of this SignInWithEmailPasswordRequestDto.
        :type client_id: str
        """
        if client_id is None:
            raise ValueError("Invalid value for `client_id`, must not be `None`")

        self._client_id = client_id
