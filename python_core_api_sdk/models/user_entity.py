# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from python_core_api_sdk.models.base_model import Model
from python_core_api_sdk import util


class UserEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, email: str=None, created_at: datetime=None, password_hash: str=None):
        """UserEntity - a model defined in OpenAPI

        :param id: The id of this UserEntity.
        :param email: The email of this UserEntity.
        :param created_at: The created_at of this UserEntity.
        :param password_hash: The password_hash of this UserEntity.
        """
        self.openapi_types = {
            'id': str,
            'email': str,
            'created_at': datetime,
            'password_hash': str
        }

        self.attribute_map = {
            'id': 'id',
            'email': 'email',
            'created_at': 'createdAt',
            'password_hash': 'passwordHash'
        }

        self._id = id
        self._email = email
        self._created_at = created_at
        self._password_hash = password_hash

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserEntity of this UserEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this UserEntity.


        :return: The id of this UserEntity.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserEntity.


        :param id: The id of this UserEntity.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def email(self):
        """Gets the email of this UserEntity.


        :return: The email of this UserEntity.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserEntity.


        :param email: The email of this UserEntity.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def created_at(self):
        """Gets the created_at of this UserEntity.


        :return: The created_at of this UserEntity.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this UserEntity.


        :param created_at: The created_at of this UserEntity.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def password_hash(self):
        """Gets the password_hash of this UserEntity.


        :return: The password_hash of this UserEntity.
        :rtype: str
        """
        return self._password_hash

    @password_hash.setter
    def password_hash(self, password_hash):
        """Sets the password_hash of this UserEntity.


        :param password_hash: The password_hash of this UserEntity.
        :type password_hash: str
        """

        self._password_hash = password_hash
