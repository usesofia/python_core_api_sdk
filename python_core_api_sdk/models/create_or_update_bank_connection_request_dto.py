# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from python_core_api_sdk.models.base_model import Model
from python_core_api_sdk import util


class CreateOrUpdateBankConnectionRequestDto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_by_user_id: str=None, provider: str=None, provider_item_id: str=None, provider_connector_id: str=None, history_range: str=None):
        """CreateOrUpdateBankConnectionRequestDto - a model defined in OpenAPI

        :param created_by_user_id: The created_by_user_id of this CreateOrUpdateBankConnectionRequestDto.
        :param provider: The provider of this CreateOrUpdateBankConnectionRequestDto.
        :param provider_item_id: The provider_item_id of this CreateOrUpdateBankConnectionRequestDto.
        :param provider_connector_id: The provider_connector_id of this CreateOrUpdateBankConnectionRequestDto.
        :param history_range: The history_range of this CreateOrUpdateBankConnectionRequestDto.
        """
        self.openapi_types = {
            'created_by_user_id': str,
            'provider': str,
            'provider_item_id': str,
            'provider_connector_id': str,
            'history_range': str
        }

        self.attribute_map = {
            'created_by_user_id': 'createdByUserId',
            'provider': 'provider',
            'provider_item_id': 'providerItemId',
            'provider_connector_id': 'providerConnectorId',
            'history_range': 'historyRange'
        }

        self._created_by_user_id = created_by_user_id
        self._provider = provider
        self._provider_item_id = provider_item_id
        self._provider_connector_id = provider_connector_id
        self._history_range = history_range

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateOrUpdateBankConnectionRequestDto':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateOrUpdateBankConnectionRequestDto of this CreateOrUpdateBankConnectionRequestDto.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_by_user_id(self):
        """Gets the created_by_user_id of this CreateOrUpdateBankConnectionRequestDto.


        :return: The created_by_user_id of this CreateOrUpdateBankConnectionRequestDto.
        :rtype: str
        """
        return self._created_by_user_id

    @created_by_user_id.setter
    def created_by_user_id(self, created_by_user_id):
        """Sets the created_by_user_id of this CreateOrUpdateBankConnectionRequestDto.


        :param created_by_user_id: The created_by_user_id of this CreateOrUpdateBankConnectionRequestDto.
        :type created_by_user_id: str
        """
        if created_by_user_id is None:
            raise ValueError("Invalid value for `created_by_user_id`, must not be `None`")

        self._created_by_user_id = created_by_user_id

    @property
    def provider(self):
        """Gets the provider of this CreateOrUpdateBankConnectionRequestDto.


        :return: The provider of this CreateOrUpdateBankConnectionRequestDto.
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this CreateOrUpdateBankConnectionRequestDto.


        :param provider: The provider of this CreateOrUpdateBankConnectionRequestDto.
        :type provider: str
        """
        if provider is None:
            raise ValueError("Invalid value for `provider`, must not be `None`")

        self._provider = provider

    @property
    def provider_item_id(self):
        """Gets the provider_item_id of this CreateOrUpdateBankConnectionRequestDto.


        :return: The provider_item_id of this CreateOrUpdateBankConnectionRequestDto.
        :rtype: str
        """
        return self._provider_item_id

    @provider_item_id.setter
    def provider_item_id(self, provider_item_id):
        """Sets the provider_item_id of this CreateOrUpdateBankConnectionRequestDto.


        :param provider_item_id: The provider_item_id of this CreateOrUpdateBankConnectionRequestDto.
        :type provider_item_id: str
        """
        if provider_item_id is None:
            raise ValueError("Invalid value for `provider_item_id`, must not be `None`")

        self._provider_item_id = provider_item_id

    @property
    def provider_connector_id(self):
        """Gets the provider_connector_id of this CreateOrUpdateBankConnectionRequestDto.


        :return: The provider_connector_id of this CreateOrUpdateBankConnectionRequestDto.
        :rtype: str
        """
        return self._provider_connector_id

    @provider_connector_id.setter
    def provider_connector_id(self, provider_connector_id):
        """Sets the provider_connector_id of this CreateOrUpdateBankConnectionRequestDto.


        :param provider_connector_id: The provider_connector_id of this CreateOrUpdateBankConnectionRequestDto.
        :type provider_connector_id: str
        """
        if provider_connector_id is None:
            raise ValueError("Invalid value for `provider_connector_id`, must not be `None`")

        self._provider_connector_id = provider_connector_id

    @property
    def history_range(self):
        """Gets the history_range of this CreateOrUpdateBankConnectionRequestDto.


        :return: The history_range of this CreateOrUpdateBankConnectionRequestDto.
        :rtype: str
        """
        return self._history_range

    @history_range.setter
    def history_range(self, history_range):
        """Sets the history_range of this CreateOrUpdateBankConnectionRequestDto.


        :param history_range: The history_range of this CreateOrUpdateBankConnectionRequestDto.
        :type history_range: str
        """
        if history_range is None:
            raise ValueError("Invalid value for `history_range`, must not be `None`")

        self._history_range = history_range
