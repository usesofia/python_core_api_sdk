# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from python_core_api_sdk.models.base_model import Model
from python_core_api_sdk.models.financial_statemente_entries_subcategory_data import FinancialStatementeEntriesSubcategoryData
from python_core_api_sdk import util


class FinancialStatementeEntriesCategoryData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category_id: str=None, category_name: str=None, outcome: float=None, subcategories: List[FinancialStatementeEntriesSubcategoryData]=None):
        """FinancialStatementeEntriesCategoryData - a model defined in OpenAPI

        :param category_id: The category_id of this FinancialStatementeEntriesCategoryData.
        :param category_name: The category_name of this FinancialStatementeEntriesCategoryData.
        :param outcome: The outcome of this FinancialStatementeEntriesCategoryData.
        :param subcategories: The subcategories of this FinancialStatementeEntriesCategoryData.
        """
        self.openapi_types = {
            'category_id': str,
            'category_name': str,
            'outcome': float,
            'subcategories': List[FinancialStatementeEntriesSubcategoryData]
        }

        self.attribute_map = {
            'category_id': 'categoryId',
            'category_name': 'categoryName',
            'outcome': 'outcome',
            'subcategories': 'subcategories'
        }

        self._category_id = category_id
        self._category_name = category_name
        self._outcome = outcome
        self._subcategories = subcategories

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FinancialStatementeEntriesCategoryData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FinancialStatementeEntriesCategoryData of this FinancialStatementeEntriesCategoryData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category_id(self):
        """Gets the category_id of this FinancialStatementeEntriesCategoryData.


        :return: The category_id of this FinancialStatementeEntriesCategoryData.
        :rtype: str
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this FinancialStatementeEntriesCategoryData.


        :param category_id: The category_id of this FinancialStatementeEntriesCategoryData.
        :type category_id: str
        """
        if category_id is None:
            raise ValueError("Invalid value for `category_id`, must not be `None`")

        self._category_id = category_id

    @property
    def category_name(self):
        """Gets the category_name of this FinancialStatementeEntriesCategoryData.


        :return: The category_name of this FinancialStatementeEntriesCategoryData.
        :rtype: str
        """
        return self._category_name

    @category_name.setter
    def category_name(self, category_name):
        """Sets the category_name of this FinancialStatementeEntriesCategoryData.


        :param category_name: The category_name of this FinancialStatementeEntriesCategoryData.
        :type category_name: str
        """
        if category_name is None:
            raise ValueError("Invalid value for `category_name`, must not be `None`")

        self._category_name = category_name

    @property
    def outcome(self):
        """Gets the outcome of this FinancialStatementeEntriesCategoryData.


        :return: The outcome of this FinancialStatementeEntriesCategoryData.
        :rtype: float
        """
        return self._outcome

    @outcome.setter
    def outcome(self, outcome):
        """Sets the outcome of this FinancialStatementeEntriesCategoryData.


        :param outcome: The outcome of this FinancialStatementeEntriesCategoryData.
        :type outcome: float
        """
        if outcome is None:
            raise ValueError("Invalid value for `outcome`, must not be `None`")

        self._outcome = outcome

    @property
    def subcategories(self):
        """Gets the subcategories of this FinancialStatementeEntriesCategoryData.


        :return: The subcategories of this FinancialStatementeEntriesCategoryData.
        :rtype: List[FinancialStatementeEntriesSubcategoryData]
        """
        return self._subcategories

    @subcategories.setter
    def subcategories(self, subcategories):
        """Sets the subcategories of this FinancialStatementeEntriesCategoryData.


        :param subcategories: The subcategories of this FinancialStatementeEntriesCategoryData.
        :type subcategories: List[FinancialStatementeEntriesSubcategoryData]
        """
        if subcategories is None:
            raise ValueError("Invalid value for `subcategories`, must not be `None`")

        self._subcategories = subcategories
