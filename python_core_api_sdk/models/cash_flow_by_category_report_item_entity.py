# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from python_core_api_sdk.models.base_model import Model
from python_core_api_sdk import util


class CashFlowByCategoryReportItemEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category_id: str=None, category_name: str=None, absolute_value: float=None, percentage: float=None):
        """CashFlowByCategoryReportItemEntity - a model defined in OpenAPI

        :param category_id: The category_id of this CashFlowByCategoryReportItemEntity.
        :param category_name: The category_name of this CashFlowByCategoryReportItemEntity.
        :param absolute_value: The absolute_value of this CashFlowByCategoryReportItemEntity.
        :param percentage: The percentage of this CashFlowByCategoryReportItemEntity.
        """
        self.openapi_types = {
            'category_id': str,
            'category_name': str,
            'absolute_value': float,
            'percentage': float
        }

        self.attribute_map = {
            'category_id': 'categoryId',
            'category_name': 'categoryName',
            'absolute_value': 'absoluteValue',
            'percentage': 'percentage'
        }

        self._category_id = category_id
        self._category_name = category_name
        self._absolute_value = absolute_value
        self._percentage = percentage

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CashFlowByCategoryReportItemEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CashFlowByCategoryReportItemEntity of this CashFlowByCategoryReportItemEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category_id(self):
        """Gets the category_id of this CashFlowByCategoryReportItemEntity.


        :return: The category_id of this CashFlowByCategoryReportItemEntity.
        :rtype: str
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this CashFlowByCategoryReportItemEntity.


        :param category_id: The category_id of this CashFlowByCategoryReportItemEntity.
        :type category_id: str
        """
        if category_id is None:
            raise ValueError("Invalid value for `category_id`, must not be `None`")

        self._category_id = category_id

    @property
    def category_name(self):
        """Gets the category_name of this CashFlowByCategoryReportItemEntity.


        :return: The category_name of this CashFlowByCategoryReportItemEntity.
        :rtype: str
        """
        return self._category_name

    @category_name.setter
    def category_name(self, category_name):
        """Sets the category_name of this CashFlowByCategoryReportItemEntity.


        :param category_name: The category_name of this CashFlowByCategoryReportItemEntity.
        :type category_name: str
        """
        if category_name is None:
            raise ValueError("Invalid value for `category_name`, must not be `None`")

        self._category_name = category_name

    @property
    def absolute_value(self):
        """Gets the absolute_value of this CashFlowByCategoryReportItemEntity.


        :return: The absolute_value of this CashFlowByCategoryReportItemEntity.
        :rtype: float
        """
        return self._absolute_value

    @absolute_value.setter
    def absolute_value(self, absolute_value):
        """Sets the absolute_value of this CashFlowByCategoryReportItemEntity.


        :param absolute_value: The absolute_value of this CashFlowByCategoryReportItemEntity.
        :type absolute_value: float
        """
        if absolute_value is None:
            raise ValueError("Invalid value for `absolute_value`, must not be `None`")

        self._absolute_value = absolute_value

    @property
    def percentage(self):
        """Gets the percentage of this CashFlowByCategoryReportItemEntity.


        :return: The percentage of this CashFlowByCategoryReportItemEntity.
        :rtype: float
        """
        return self._percentage

    @percentage.setter
    def percentage(self, percentage):
        """Sets the percentage of this CashFlowByCategoryReportItemEntity.


        :param percentage: The percentage of this CashFlowByCategoryReportItemEntity.
        :type percentage: float
        """
        if percentage is None:
            raise ValueError("Invalid value for `percentage`, must not be `None`")

        self._percentage = percentage
