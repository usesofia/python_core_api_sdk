# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from python_core_api_sdk.models.base_model import Model
from python_core_api_sdk import util


class CreateWorkspaceRequestDto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pretty_id: str=None, name: str=None, type: str=None, business_segment: str=None, other_description: str=None):
        """CreateWorkspaceRequestDto - a model defined in OpenAPI

        :param pretty_id: The pretty_id of this CreateWorkspaceRequestDto.
        :param name: The name of this CreateWorkspaceRequestDto.
        :param type: The type of this CreateWorkspaceRequestDto.
        :param business_segment: The business_segment of this CreateWorkspaceRequestDto.
        :param other_description: The other_description of this CreateWorkspaceRequestDto.
        """
        self.openapi_types = {
            'pretty_id': str,
            'name': str,
            'type': str,
            'business_segment': str,
            'other_description': str
        }

        self.attribute_map = {
            'pretty_id': 'prettyId',
            'name': 'name',
            'type': 'type',
            'business_segment': 'businessSegment',
            'other_description': 'otherDescription'
        }

        self._pretty_id = pretty_id
        self._name = name
        self._type = type
        self._business_segment = business_segment
        self._other_description = other_description

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateWorkspaceRequestDto':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateWorkspaceRequestDto of this CreateWorkspaceRequestDto.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pretty_id(self):
        """Gets the pretty_id of this CreateWorkspaceRequestDto.


        :return: The pretty_id of this CreateWorkspaceRequestDto.
        :rtype: str
        """
        return self._pretty_id

    @pretty_id.setter
    def pretty_id(self, pretty_id):
        """Sets the pretty_id of this CreateWorkspaceRequestDto.


        :param pretty_id: The pretty_id of this CreateWorkspaceRequestDto.
        :type pretty_id: str
        """
        if pretty_id is None:
            raise ValueError("Invalid value for `pretty_id`, must not be `None`")

        self._pretty_id = pretty_id

    @property
    def name(self):
        """Gets the name of this CreateWorkspaceRequestDto.


        :return: The name of this CreateWorkspaceRequestDto.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateWorkspaceRequestDto.


        :param name: The name of this CreateWorkspaceRequestDto.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def type(self):
        """Gets the type of this CreateWorkspaceRequestDto.


        :return: The type of this CreateWorkspaceRequestDto.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreateWorkspaceRequestDto.


        :param type: The type of this CreateWorkspaceRequestDto.
        :type type: str
        """

        self._type = type

    @property
    def business_segment(self):
        """Gets the business_segment of this CreateWorkspaceRequestDto.


        :return: The business_segment of this CreateWorkspaceRequestDto.
        :rtype: str
        """
        return self._business_segment

    @business_segment.setter
    def business_segment(self, business_segment):
        """Sets the business_segment of this CreateWorkspaceRequestDto.


        :param business_segment: The business_segment of this CreateWorkspaceRequestDto.
        :type business_segment: str
        """

        self._business_segment = business_segment

    @property
    def other_description(self):
        """Gets the other_description of this CreateWorkspaceRequestDto.


        :return: The other_description of this CreateWorkspaceRequestDto.
        :rtype: str
        """
        return self._other_description

    @other_description.setter
    def other_description(self, other_description):
        """Sets the other_description of this CreateWorkspaceRequestDto.


        :param other_description: The other_description of this CreateWorkspaceRequestDto.
        :type other_description: str
        """

        self._other_description = other_description
