# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from python_core_api_sdk.models.base_model import Model
from python_core_api_sdk import util


class FinancialStatementeEntriesSubcategoryData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, subcategory_id: str=None, subcategory_name: str=None, outcome: float=None):
        """FinancialStatementeEntriesSubcategoryData - a model defined in OpenAPI

        :param subcategory_id: The subcategory_id of this FinancialStatementeEntriesSubcategoryData.
        :param subcategory_name: The subcategory_name of this FinancialStatementeEntriesSubcategoryData.
        :param outcome: The outcome of this FinancialStatementeEntriesSubcategoryData.
        """
        self.openapi_types = {
            'subcategory_id': str,
            'subcategory_name': str,
            'outcome': float
        }

        self.attribute_map = {
            'subcategory_id': 'subcategoryId',
            'subcategory_name': 'subcategoryName',
            'outcome': 'outcome'
        }

        self._subcategory_id = subcategory_id
        self._subcategory_name = subcategory_name
        self._outcome = outcome

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FinancialStatementeEntriesSubcategoryData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FinancialStatementeEntriesSubcategoryData of this FinancialStatementeEntriesSubcategoryData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def subcategory_id(self):
        """Gets the subcategory_id of this FinancialStatementeEntriesSubcategoryData.


        :return: The subcategory_id of this FinancialStatementeEntriesSubcategoryData.
        :rtype: str
        """
        return self._subcategory_id

    @subcategory_id.setter
    def subcategory_id(self, subcategory_id):
        """Sets the subcategory_id of this FinancialStatementeEntriesSubcategoryData.


        :param subcategory_id: The subcategory_id of this FinancialStatementeEntriesSubcategoryData.
        :type subcategory_id: str
        """
        if subcategory_id is None:
            raise ValueError("Invalid value for `subcategory_id`, must not be `None`")

        self._subcategory_id = subcategory_id

    @property
    def subcategory_name(self):
        """Gets the subcategory_name of this FinancialStatementeEntriesSubcategoryData.


        :return: The subcategory_name of this FinancialStatementeEntriesSubcategoryData.
        :rtype: str
        """
        return self._subcategory_name

    @subcategory_name.setter
    def subcategory_name(self, subcategory_name):
        """Sets the subcategory_name of this FinancialStatementeEntriesSubcategoryData.


        :param subcategory_name: The subcategory_name of this FinancialStatementeEntriesSubcategoryData.
        :type subcategory_name: str
        """
        if subcategory_name is None:
            raise ValueError("Invalid value for `subcategory_name`, must not be `None`")

        self._subcategory_name = subcategory_name

    @property
    def outcome(self):
        """Gets the outcome of this FinancialStatementeEntriesSubcategoryData.


        :return: The outcome of this FinancialStatementeEntriesSubcategoryData.
        :rtype: float
        """
        return self._outcome

    @outcome.setter
    def outcome(self, outcome):
        """Sets the outcome of this FinancialStatementeEntriesSubcategoryData.


        :param outcome: The outcome of this FinancialStatementeEntriesSubcategoryData.
        :type outcome: float
        """
        if outcome is None:
            raise ValueError("Invalid value for `outcome`, must not be `None`")

        self._outcome = outcome
