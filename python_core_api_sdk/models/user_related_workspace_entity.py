# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from python_core_api_sdk.models.base_model import Model
from python_core_api_sdk import util


class UserRelatedWorkspaceEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, pretty_id: str=None, name: str=None, type: str=None, creator_user_id: str=None, created_at: datetime=None, relation_type: str=None):
        """UserRelatedWorkspaceEntity - a model defined in OpenAPI

        :param id: The id of this UserRelatedWorkspaceEntity.
        :param pretty_id: The pretty_id of this UserRelatedWorkspaceEntity.
        :param name: The name of this UserRelatedWorkspaceEntity.
        :param type: The type of this UserRelatedWorkspaceEntity.
        :param creator_user_id: The creator_user_id of this UserRelatedWorkspaceEntity.
        :param created_at: The created_at of this UserRelatedWorkspaceEntity.
        :param relation_type: The relation_type of this UserRelatedWorkspaceEntity.
        """
        self.openapi_types = {
            'id': str,
            'pretty_id': str,
            'name': str,
            'type': str,
            'creator_user_id': str,
            'created_at': datetime,
            'relation_type': str
        }

        self.attribute_map = {
            'id': 'id',
            'pretty_id': 'prettyId',
            'name': 'name',
            'type': 'type',
            'creator_user_id': 'creatorUserId',
            'created_at': 'createdAt',
            'relation_type': 'relationType'
        }

        self._id = id
        self._pretty_id = pretty_id
        self._name = name
        self._type = type
        self._creator_user_id = creator_user_id
        self._created_at = created_at
        self._relation_type = relation_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserRelatedWorkspaceEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserRelatedWorkspaceEntity of this UserRelatedWorkspaceEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this UserRelatedWorkspaceEntity.


        :return: The id of this UserRelatedWorkspaceEntity.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserRelatedWorkspaceEntity.


        :param id: The id of this UserRelatedWorkspaceEntity.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def pretty_id(self):
        """Gets the pretty_id of this UserRelatedWorkspaceEntity.


        :return: The pretty_id of this UserRelatedWorkspaceEntity.
        :rtype: str
        """
        return self._pretty_id

    @pretty_id.setter
    def pretty_id(self, pretty_id):
        """Sets the pretty_id of this UserRelatedWorkspaceEntity.


        :param pretty_id: The pretty_id of this UserRelatedWorkspaceEntity.
        :type pretty_id: str
        """
        if pretty_id is None:
            raise ValueError("Invalid value for `pretty_id`, must not be `None`")

        self._pretty_id = pretty_id

    @property
    def name(self):
        """Gets the name of this UserRelatedWorkspaceEntity.


        :return: The name of this UserRelatedWorkspaceEntity.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UserRelatedWorkspaceEntity.


        :param name: The name of this UserRelatedWorkspaceEntity.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def type(self):
        """Gets the type of this UserRelatedWorkspaceEntity.


        :return: The type of this UserRelatedWorkspaceEntity.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this UserRelatedWorkspaceEntity.


        :param type: The type of this UserRelatedWorkspaceEntity.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def creator_user_id(self):
        """Gets the creator_user_id of this UserRelatedWorkspaceEntity.


        :return: The creator_user_id of this UserRelatedWorkspaceEntity.
        :rtype: str
        """
        return self._creator_user_id

    @creator_user_id.setter
    def creator_user_id(self, creator_user_id):
        """Sets the creator_user_id of this UserRelatedWorkspaceEntity.


        :param creator_user_id: The creator_user_id of this UserRelatedWorkspaceEntity.
        :type creator_user_id: str
        """
        if creator_user_id is None:
            raise ValueError("Invalid value for `creator_user_id`, must not be `None`")

        self._creator_user_id = creator_user_id

    @property
    def created_at(self):
        """Gets the created_at of this UserRelatedWorkspaceEntity.


        :return: The created_at of this UserRelatedWorkspaceEntity.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this UserRelatedWorkspaceEntity.


        :param created_at: The created_at of this UserRelatedWorkspaceEntity.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def relation_type(self):
        """Gets the relation_type of this UserRelatedWorkspaceEntity.


        :return: The relation_type of this UserRelatedWorkspaceEntity.
        :rtype: str
        """
        return self._relation_type

    @relation_type.setter
    def relation_type(self, relation_type):
        """Sets the relation_type of this UserRelatedWorkspaceEntity.


        :param relation_type: The relation_type of this UserRelatedWorkspaceEntity.
        :type relation_type: str
        """
        if relation_type is None:
            raise ValueError("Invalid value for `relation_type`, must not be `None`")

        self._relation_type = relation_type
