# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from python_core_api_sdk.models.base_model import Model
from python_core_api_sdk import util


class CreateOrUpdateMessageTokenRequestDto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, platform: str=None, device_id: str=None, token: str=None):
        """CreateOrUpdateMessageTokenRequestDto - a model defined in OpenAPI

        :param platform: The platform of this CreateOrUpdateMessageTokenRequestDto.
        :param device_id: The device_id of this CreateOrUpdateMessageTokenRequestDto.
        :param token: The token of this CreateOrUpdateMessageTokenRequestDto.
        """
        self.openapi_types = {
            'platform': str,
            'device_id': str,
            'token': str
        }

        self.attribute_map = {
            'platform': 'platform',
            'device_id': 'deviceId',
            'token': 'token'
        }

        self._platform = platform
        self._device_id = device_id
        self._token = token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateOrUpdateMessageTokenRequestDto':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateOrUpdateMessageTokenRequestDto of this CreateOrUpdateMessageTokenRequestDto.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def platform(self):
        """Gets the platform of this CreateOrUpdateMessageTokenRequestDto.


        :return: The platform of this CreateOrUpdateMessageTokenRequestDto.
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this CreateOrUpdateMessageTokenRequestDto.


        :param platform: The platform of this CreateOrUpdateMessageTokenRequestDto.
        :type platform: str
        """
        if platform is None:
            raise ValueError("Invalid value for `platform`, must not be `None`")

        self._platform = platform

    @property
    def device_id(self):
        """Gets the device_id of this CreateOrUpdateMessageTokenRequestDto.


        :return: The device_id of this CreateOrUpdateMessageTokenRequestDto.
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this CreateOrUpdateMessageTokenRequestDto.


        :param device_id: The device_id of this CreateOrUpdateMessageTokenRequestDto.
        :type device_id: str
        """
        if device_id is None:
            raise ValueError("Invalid value for `device_id`, must not be `None`")

        self._device_id = device_id

    @property
    def token(self):
        """Gets the token of this CreateOrUpdateMessageTokenRequestDto.


        :return: The token of this CreateOrUpdateMessageTokenRequestDto.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this CreateOrUpdateMessageTokenRequestDto.


        :param token: The token of this CreateOrUpdateMessageTokenRequestDto.
        :type token: str
        """
        if token is None:
            raise ValueError("Invalid value for `token`, must not be `None`")

        self._token = token
