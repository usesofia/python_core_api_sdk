# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from python_core_api_sdk.models.base_model import Model
from python_core_api_sdk import util


class FinancialTransactionsFeatureSpecificationEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, unlimited: bool=None, max_per_month: float=None, subscription_product_id: str=None):
        """FinancialTransactionsFeatureSpecificationEntity - a model defined in OpenAPI

        :param id: The id of this FinancialTransactionsFeatureSpecificationEntity.
        :param unlimited: The unlimited of this FinancialTransactionsFeatureSpecificationEntity.
        :param max_per_month: The max_per_month of this FinancialTransactionsFeatureSpecificationEntity.
        :param subscription_product_id: The subscription_product_id of this FinancialTransactionsFeatureSpecificationEntity.
        """
        self.openapi_types = {
            'id': str,
            'unlimited': bool,
            'max_per_month': float,
            'subscription_product_id': str
        }

        self.attribute_map = {
            'id': 'id',
            'unlimited': 'unlimited',
            'max_per_month': 'maxPerMonth',
            'subscription_product_id': 'subscriptionProductId'
        }

        self._id = id
        self._unlimited = unlimited
        self._max_per_month = max_per_month
        self._subscription_product_id = subscription_product_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FinancialTransactionsFeatureSpecificationEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FinancialTransactionsFeatureSpecificationEntity of this FinancialTransactionsFeatureSpecificationEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this FinancialTransactionsFeatureSpecificationEntity.


        :return: The id of this FinancialTransactionsFeatureSpecificationEntity.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FinancialTransactionsFeatureSpecificationEntity.


        :param id: The id of this FinancialTransactionsFeatureSpecificationEntity.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def unlimited(self):
        """Gets the unlimited of this FinancialTransactionsFeatureSpecificationEntity.


        :return: The unlimited of this FinancialTransactionsFeatureSpecificationEntity.
        :rtype: bool
        """
        return self._unlimited

    @unlimited.setter
    def unlimited(self, unlimited):
        """Sets the unlimited of this FinancialTransactionsFeatureSpecificationEntity.


        :param unlimited: The unlimited of this FinancialTransactionsFeatureSpecificationEntity.
        :type unlimited: bool
        """
        if unlimited is None:
            raise ValueError("Invalid value for `unlimited`, must not be `None`")

        self._unlimited = unlimited

    @property
    def max_per_month(self):
        """Gets the max_per_month of this FinancialTransactionsFeatureSpecificationEntity.


        :return: The max_per_month of this FinancialTransactionsFeatureSpecificationEntity.
        :rtype: float
        """
        return self._max_per_month

    @max_per_month.setter
    def max_per_month(self, max_per_month):
        """Sets the max_per_month of this FinancialTransactionsFeatureSpecificationEntity.


        :param max_per_month: The max_per_month of this FinancialTransactionsFeatureSpecificationEntity.
        :type max_per_month: float
        """

        self._max_per_month = max_per_month

    @property
    def subscription_product_id(self):
        """Gets the subscription_product_id of this FinancialTransactionsFeatureSpecificationEntity.


        :return: The subscription_product_id of this FinancialTransactionsFeatureSpecificationEntity.
        :rtype: str
        """
        return self._subscription_product_id

    @subscription_product_id.setter
    def subscription_product_id(self, subscription_product_id):
        """Sets the subscription_product_id of this FinancialTransactionsFeatureSpecificationEntity.


        :param subscription_product_id: The subscription_product_id of this FinancialTransactionsFeatureSpecificationEntity.
        :type subscription_product_id: str
        """
        if subscription_product_id is None:
            raise ValueError("Invalid value for `subscription_product_id`, must not be `None`")

        self._subscription_product_id = subscription_product_id
