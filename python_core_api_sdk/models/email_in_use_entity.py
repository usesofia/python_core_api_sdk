# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from python_core_api_sdk.models.base_model import Model
from python_core_api_sdk import util


class EmailInUseEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email: str=None, in_use: bool=None):
        """EmailInUseEntity - a model defined in OpenAPI

        :param email: The email of this EmailInUseEntity.
        :param in_use: The in_use of this EmailInUseEntity.
        """
        self.openapi_types = {
            'email': str,
            'in_use': bool
        }

        self.attribute_map = {
            'email': 'email',
            'in_use': 'inUse'
        }

        self._email = email
        self._in_use = in_use

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EmailInUseEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EmailInUseEntity of this EmailInUseEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email(self):
        """Gets the email of this EmailInUseEntity.


        :return: The email of this EmailInUseEntity.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this EmailInUseEntity.


        :param email: The email of this EmailInUseEntity.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def in_use(self):
        """Gets the in_use of this EmailInUseEntity.


        :return: The in_use of this EmailInUseEntity.
        :rtype: bool
        """
        return self._in_use

    @in_use.setter
    def in_use(self, in_use):
        """Sets the in_use of this EmailInUseEntity.


        :param in_use: The in_use of this EmailInUseEntity.
        :type in_use: bool
        """
        if in_use is None:
            raise ValueError("Invalid value for `in_use`, must not be `None`")

        self._in_use = in_use
