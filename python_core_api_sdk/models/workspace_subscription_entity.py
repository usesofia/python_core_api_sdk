# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from python_core_api_sdk.models.base_model import Model
from python_core_api_sdk.models.subscription_product_entity import SubscriptionProductEntity
from python_core_api_sdk import util


class WorkspaceSubscriptionEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, workspace_id: str=None, subscription_product_id: str=None, subscription_product: SubscriptionProductEntity=None, status: str=None, payment_system: str=None, payment_system_subscription_id: str=None, created_at: datetime=None):
        """WorkspaceSubscriptionEntity - a model defined in OpenAPI

        :param id: The id of this WorkspaceSubscriptionEntity.
        :param workspace_id: The workspace_id of this WorkspaceSubscriptionEntity.
        :param subscription_product_id: The subscription_product_id of this WorkspaceSubscriptionEntity.
        :param subscription_product: The subscription_product of this WorkspaceSubscriptionEntity.
        :param status: The status of this WorkspaceSubscriptionEntity.
        :param payment_system: The payment_system of this WorkspaceSubscriptionEntity.
        :param payment_system_subscription_id: The payment_system_subscription_id of this WorkspaceSubscriptionEntity.
        :param created_at: The created_at of this WorkspaceSubscriptionEntity.
        """
        self.openapi_types = {
            'id': str,
            'workspace_id': str,
            'subscription_product_id': str,
            'subscription_product': SubscriptionProductEntity,
            'status': str,
            'payment_system': str,
            'payment_system_subscription_id': str,
            'created_at': datetime
        }

        self.attribute_map = {
            'id': 'id',
            'workspace_id': 'workspaceId',
            'subscription_product_id': 'subscriptionProductId',
            'subscription_product': 'subscriptionProduct',
            'status': 'status',
            'payment_system': 'paymentSystem',
            'payment_system_subscription_id': 'paymentSystemSubscriptionId',
            'created_at': 'createdAt'
        }

        self._id = id
        self._workspace_id = workspace_id
        self._subscription_product_id = subscription_product_id
        self._subscription_product = subscription_product
        self._status = status
        self._payment_system = payment_system
        self._payment_system_subscription_id = payment_system_subscription_id
        self._created_at = created_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WorkspaceSubscriptionEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WorkspaceSubscriptionEntity of this WorkspaceSubscriptionEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this WorkspaceSubscriptionEntity.


        :return: The id of this WorkspaceSubscriptionEntity.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WorkspaceSubscriptionEntity.


        :param id: The id of this WorkspaceSubscriptionEntity.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def workspace_id(self):
        """Gets the workspace_id of this WorkspaceSubscriptionEntity.


        :return: The workspace_id of this WorkspaceSubscriptionEntity.
        :rtype: str
        """
        return self._workspace_id

    @workspace_id.setter
    def workspace_id(self, workspace_id):
        """Sets the workspace_id of this WorkspaceSubscriptionEntity.


        :param workspace_id: The workspace_id of this WorkspaceSubscriptionEntity.
        :type workspace_id: str
        """
        if workspace_id is None:
            raise ValueError("Invalid value for `workspace_id`, must not be `None`")

        self._workspace_id = workspace_id

    @property
    def subscription_product_id(self):
        """Gets the subscription_product_id of this WorkspaceSubscriptionEntity.


        :return: The subscription_product_id of this WorkspaceSubscriptionEntity.
        :rtype: str
        """
        return self._subscription_product_id

    @subscription_product_id.setter
    def subscription_product_id(self, subscription_product_id):
        """Sets the subscription_product_id of this WorkspaceSubscriptionEntity.


        :param subscription_product_id: The subscription_product_id of this WorkspaceSubscriptionEntity.
        :type subscription_product_id: str
        """
        if subscription_product_id is None:
            raise ValueError("Invalid value for `subscription_product_id`, must not be `None`")

        self._subscription_product_id = subscription_product_id

    @property
    def subscription_product(self):
        """Gets the subscription_product of this WorkspaceSubscriptionEntity.


        :return: The subscription_product of this WorkspaceSubscriptionEntity.
        :rtype: SubscriptionProductEntity
        """
        return self._subscription_product

    @subscription_product.setter
    def subscription_product(self, subscription_product):
        """Sets the subscription_product of this WorkspaceSubscriptionEntity.


        :param subscription_product: The subscription_product of this WorkspaceSubscriptionEntity.
        :type subscription_product: SubscriptionProductEntity
        """
        if subscription_product is None:
            raise ValueError("Invalid value for `subscription_product`, must not be `None`")

        self._subscription_product = subscription_product

    @property
    def status(self):
        """Gets the status of this WorkspaceSubscriptionEntity.


        :return: The status of this WorkspaceSubscriptionEntity.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this WorkspaceSubscriptionEntity.


        :param status: The status of this WorkspaceSubscriptionEntity.
        :type status: str
        """
        allowed_values = ["ACTIVE", "NOT_ACTIVE", "TRIAL"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def payment_system(self):
        """Gets the payment_system of this WorkspaceSubscriptionEntity.


        :return: The payment_system of this WorkspaceSubscriptionEntity.
        :rtype: str
        """
        return self._payment_system

    @payment_system.setter
    def payment_system(self, payment_system):
        """Sets the payment_system of this WorkspaceSubscriptionEntity.


        :param payment_system: The payment_system of this WorkspaceSubscriptionEntity.
        :type payment_system: str
        """
        allowed_values = ["STRIPE"]  # noqa: E501
        if payment_system not in allowed_values:
            raise ValueError(
                "Invalid value for `payment_system` ({0}), must be one of {1}"
                .format(payment_system, allowed_values)
            )

        self._payment_system = payment_system

    @property
    def payment_system_subscription_id(self):
        """Gets the payment_system_subscription_id of this WorkspaceSubscriptionEntity.


        :return: The payment_system_subscription_id of this WorkspaceSubscriptionEntity.
        :rtype: str
        """
        return self._payment_system_subscription_id

    @payment_system_subscription_id.setter
    def payment_system_subscription_id(self, payment_system_subscription_id):
        """Sets the payment_system_subscription_id of this WorkspaceSubscriptionEntity.


        :param payment_system_subscription_id: The payment_system_subscription_id of this WorkspaceSubscriptionEntity.
        :type payment_system_subscription_id: str
        """
        if payment_system_subscription_id is None:
            raise ValueError("Invalid value for `payment_system_subscription_id`, must not be `None`")

        self._payment_system_subscription_id = payment_system_subscription_id

    @property
    def created_at(self):
        """Gets the created_at of this WorkspaceSubscriptionEntity.


        :return: The created_at of this WorkspaceSubscriptionEntity.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this WorkspaceSubscriptionEntity.


        :param created_at: The created_at of this WorkspaceSubscriptionEntity.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at
