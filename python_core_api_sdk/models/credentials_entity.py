# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from python_core_api_sdk.models.base_model import Model
from python_core_api_sdk import util


class CredentialsEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, user_id: str=None, access_token: str=None, refresh_token: str=None):
        """CredentialsEntity - a model defined in OpenAPI

        :param user_id: The user_id of this CredentialsEntity.
        :param access_token: The access_token of this CredentialsEntity.
        :param refresh_token: The refresh_token of this CredentialsEntity.
        """
        self.openapi_types = {
            'user_id': str,
            'access_token': str,
            'refresh_token': str
        }

        self.attribute_map = {
            'user_id': 'userId',
            'access_token': 'accessToken',
            'refresh_token': 'refreshToken'
        }

        self._user_id = user_id
        self._access_token = access_token
        self._refresh_token = refresh_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CredentialsEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CredentialsEntity of this CredentialsEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user_id(self):
        """Gets the user_id of this CredentialsEntity.


        :return: The user_id of this CredentialsEntity.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this CredentialsEntity.


        :param user_id: The user_id of this CredentialsEntity.
        :type user_id: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")

        self._user_id = user_id

    @property
    def access_token(self):
        """Gets the access_token of this CredentialsEntity.


        :return: The access_token of this CredentialsEntity.
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """Sets the access_token of this CredentialsEntity.


        :param access_token: The access_token of this CredentialsEntity.
        :type access_token: str
        """
        if access_token is None:
            raise ValueError("Invalid value for `access_token`, must not be `None`")

        self._access_token = access_token

    @property
    def refresh_token(self):
        """Gets the refresh_token of this CredentialsEntity.


        :return: The refresh_token of this CredentialsEntity.
        :rtype: str
        """
        return self._refresh_token

    @refresh_token.setter
    def refresh_token(self, refresh_token):
        """Sets the refresh_token of this CredentialsEntity.


        :param refresh_token: The refresh_token of this CredentialsEntity.
        :type refresh_token: str
        """
        if refresh_token is None:
            raise ValueError("Invalid value for `refresh_token`, must not be `None`")

        self._refresh_token = refresh_token
