# coding: utf-8

"""
    Sofia Api

    Api principal do sistema Sofia.

    The version of the OpenAPI document: 1.0.12
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class SyncBankAccountTransactionsPageEndRequestDtoBankProviderTransactionsPageTransactionsInnerCreditCardMetadata(BaseModel):
    """
    SyncBankAccountTransactionsPageEndRequestDtoBankProviderTransactionsPageTransactionsInnerCreditCardMetadata
    """ # noqa: E501
    installment_number: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="installmentNumber")
    total_installments: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="totalInstallments")
    total_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="totalAmount")
    payee_mcc: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="payeeMCC")
    card_number: Optional[StrictStr] = Field(default=None, alias="cardNumber")
    bill_id: Optional[StrictStr] = Field(default=None, alias="billId")
    __properties: ClassVar[List[str]] = ["installmentNumber", "totalInstallments", "totalAmount", "payeeMCC", "cardNumber", "billId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SyncBankAccountTransactionsPageEndRequestDtoBankProviderTransactionsPageTransactionsInnerCreditCardMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if installment_number (nullable) is None
        # and model_fields_set contains the field
        if self.installment_number is None and "installment_number" in self.model_fields_set:
            _dict['installmentNumber'] = None

        # set to None if total_installments (nullable) is None
        # and model_fields_set contains the field
        if self.total_installments is None and "total_installments" in self.model_fields_set:
            _dict['totalInstallments'] = None

        # set to None if total_amount (nullable) is None
        # and model_fields_set contains the field
        if self.total_amount is None and "total_amount" in self.model_fields_set:
            _dict['totalAmount'] = None

        # set to None if payee_mcc (nullable) is None
        # and model_fields_set contains the field
        if self.payee_mcc is None and "payee_mcc" in self.model_fields_set:
            _dict['payeeMCC'] = None

        # set to None if card_number (nullable) is None
        # and model_fields_set contains the field
        if self.card_number is None and "card_number" in self.model_fields_set:
            _dict['cardNumber'] = None

        # set to None if bill_id (nullable) is None
        # and model_fields_set contains the field
        if self.bill_id is None and "bill_id" in self.model_fields_set:
            _dict['billId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SyncBankAccountTransactionsPageEndRequestDtoBankProviderTransactionsPageTransactionsInnerCreditCardMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "installmentNumber": obj.get("installmentNumber"),
            "totalInstallments": obj.get("totalInstallments"),
            "totalAmount": obj.get("totalAmount"),
            "payeeMCC": obj.get("payeeMCC"),
            "cardNumber": obj.get("cardNumber"),
            "billId": obj.get("billId")
        })
        return _obj


