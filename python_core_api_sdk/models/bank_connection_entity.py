# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from python_core_api_sdk.models.base_model import Model
from python_core_api_sdk.models.bank_connector_entity import BankConnectorEntity
from python_core_api_sdk import util


class BankConnectionEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, created_by_user_id: str=None, workspace_id: str=None, enabled: bool=None, provider: str=None, provider_item_id: str=None, history_range: str=None, connector_id: str=None, connector: BankConnectorEntity=None, created_at: datetime=None, updated_at: datetime=None):
        """BankConnectionEntity - a model defined in OpenAPI

        :param id: The id of this BankConnectionEntity.
        :param created_by_user_id: The created_by_user_id of this BankConnectionEntity.
        :param workspace_id: The workspace_id of this BankConnectionEntity.
        :param enabled: The enabled of this BankConnectionEntity.
        :param provider: The provider of this BankConnectionEntity.
        :param provider_item_id: The provider_item_id of this BankConnectionEntity.
        :param history_range: The history_range of this BankConnectionEntity.
        :param connector_id: The connector_id of this BankConnectionEntity.
        :param connector: The connector of this BankConnectionEntity.
        :param created_at: The created_at of this BankConnectionEntity.
        :param updated_at: The updated_at of this BankConnectionEntity.
        """
        self.openapi_types = {
            'id': str,
            'created_by_user_id': str,
            'workspace_id': str,
            'enabled': bool,
            'provider': str,
            'provider_item_id': str,
            'history_range': str,
            'connector_id': str,
            'connector': BankConnectorEntity,
            'created_at': datetime,
            'updated_at': datetime
        }

        self.attribute_map = {
            'id': 'id',
            'created_by_user_id': 'createdByUserId',
            'workspace_id': 'workspaceId',
            'enabled': 'enabled',
            'provider': 'provider',
            'provider_item_id': 'providerItemId',
            'history_range': 'historyRange',
            'connector_id': 'connectorId',
            'connector': 'connector',
            'created_at': 'createdAt',
            'updated_at': 'updatedAt'
        }

        self._id = id
        self._created_by_user_id = created_by_user_id
        self._workspace_id = workspace_id
        self._enabled = enabled
        self._provider = provider
        self._provider_item_id = provider_item_id
        self._history_range = history_range
        self._connector_id = connector_id
        self._connector = connector
        self._created_at = created_at
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BankConnectionEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BankConnectionEntity of this BankConnectionEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this BankConnectionEntity.


        :return: The id of this BankConnectionEntity.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BankConnectionEntity.


        :param id: The id of this BankConnectionEntity.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def created_by_user_id(self):
        """Gets the created_by_user_id of this BankConnectionEntity.


        :return: The created_by_user_id of this BankConnectionEntity.
        :rtype: str
        """
        return self._created_by_user_id

    @created_by_user_id.setter
    def created_by_user_id(self, created_by_user_id):
        """Sets the created_by_user_id of this BankConnectionEntity.


        :param created_by_user_id: The created_by_user_id of this BankConnectionEntity.
        :type created_by_user_id: str
        """
        if created_by_user_id is None:
            raise ValueError("Invalid value for `created_by_user_id`, must not be `None`")

        self._created_by_user_id = created_by_user_id

    @property
    def workspace_id(self):
        """Gets the workspace_id of this BankConnectionEntity.


        :return: The workspace_id of this BankConnectionEntity.
        :rtype: str
        """
        return self._workspace_id

    @workspace_id.setter
    def workspace_id(self, workspace_id):
        """Sets the workspace_id of this BankConnectionEntity.


        :param workspace_id: The workspace_id of this BankConnectionEntity.
        :type workspace_id: str
        """
        if workspace_id is None:
            raise ValueError("Invalid value for `workspace_id`, must not be `None`")

        self._workspace_id = workspace_id

    @property
    def enabled(self):
        """Gets the enabled of this BankConnectionEntity.


        :return: The enabled of this BankConnectionEntity.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this BankConnectionEntity.


        :param enabled: The enabled of this BankConnectionEntity.
        :type enabled: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")

        self._enabled = enabled

    @property
    def provider(self):
        """Gets the provider of this BankConnectionEntity.


        :return: The provider of this BankConnectionEntity.
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this BankConnectionEntity.


        :param provider: The provider of this BankConnectionEntity.
        :type provider: str
        """
        if provider is None:
            raise ValueError("Invalid value for `provider`, must not be `None`")

        self._provider = provider

    @property
    def provider_item_id(self):
        """Gets the provider_item_id of this BankConnectionEntity.


        :return: The provider_item_id of this BankConnectionEntity.
        :rtype: str
        """
        return self._provider_item_id

    @provider_item_id.setter
    def provider_item_id(self, provider_item_id):
        """Sets the provider_item_id of this BankConnectionEntity.


        :param provider_item_id: The provider_item_id of this BankConnectionEntity.
        :type provider_item_id: str
        """
        if provider_item_id is None:
            raise ValueError("Invalid value for `provider_item_id`, must not be `None`")

        self._provider_item_id = provider_item_id

    @property
    def history_range(self):
        """Gets the history_range of this BankConnectionEntity.


        :return: The history_range of this BankConnectionEntity.
        :rtype: str
        """
        return self._history_range

    @history_range.setter
    def history_range(self, history_range):
        """Sets the history_range of this BankConnectionEntity.


        :param history_range: The history_range of this BankConnectionEntity.
        :type history_range: str
        """
        if history_range is None:
            raise ValueError("Invalid value for `history_range`, must not be `None`")

        self._history_range = history_range

    @property
    def connector_id(self):
        """Gets the connector_id of this BankConnectionEntity.


        :return: The connector_id of this BankConnectionEntity.
        :rtype: str
        """
        return self._connector_id

    @connector_id.setter
    def connector_id(self, connector_id):
        """Sets the connector_id of this BankConnectionEntity.


        :param connector_id: The connector_id of this BankConnectionEntity.
        :type connector_id: str
        """
        if connector_id is None:
            raise ValueError("Invalid value for `connector_id`, must not be `None`")

        self._connector_id = connector_id

    @property
    def connector(self):
        """Gets the connector of this BankConnectionEntity.


        :return: The connector of this BankConnectionEntity.
        :rtype: BankConnectorEntity
        """
        return self._connector

    @connector.setter
    def connector(self, connector):
        """Sets the connector of this BankConnectionEntity.


        :param connector: The connector of this BankConnectionEntity.
        :type connector: BankConnectorEntity
        """
        if connector is None:
            raise ValueError("Invalid value for `connector`, must not be `None`")

        self._connector = connector

    @property
    def created_at(self):
        """Gets the created_at of this BankConnectionEntity.


        :return: The created_at of this BankConnectionEntity.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this BankConnectionEntity.


        :param created_at: The created_at of this BankConnectionEntity.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this BankConnectionEntity.


        :return: The updated_at of this BankConnectionEntity.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this BankConnectionEntity.


        :param updated_at: The updated_at of this BankConnectionEntity.
        :type updated_at: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at
