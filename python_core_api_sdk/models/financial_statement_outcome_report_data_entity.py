# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from python_core_api_sdk.models.base_model import Model
from python_core_api_sdk import util


class FinancialStatementOutcomeReportDataEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, outcome: float=None, percentage: float=None):
        """FinancialStatementOutcomeReportDataEntity - a model defined in OpenAPI

        :param name: The name of this FinancialStatementOutcomeReportDataEntity.
        :param outcome: The outcome of this FinancialStatementOutcomeReportDataEntity.
        :param percentage: The percentage of this FinancialStatementOutcomeReportDataEntity.
        """
        self.openapi_types = {
            'name': str,
            'outcome': float,
            'percentage': float
        }

        self.attribute_map = {
            'name': 'name',
            'outcome': 'outcome',
            'percentage': 'percentage'
        }

        self._name = name
        self._outcome = outcome
        self._percentage = percentage

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FinancialStatementOutcomeReportDataEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FinancialStatementOutcomeReportDataEntity of this FinancialStatementOutcomeReportDataEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this FinancialStatementOutcomeReportDataEntity.


        :return: The name of this FinancialStatementOutcomeReportDataEntity.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FinancialStatementOutcomeReportDataEntity.


        :param name: The name of this FinancialStatementOutcomeReportDataEntity.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def outcome(self):
        """Gets the outcome of this FinancialStatementOutcomeReportDataEntity.


        :return: The outcome of this FinancialStatementOutcomeReportDataEntity.
        :rtype: float
        """
        return self._outcome

    @outcome.setter
    def outcome(self, outcome):
        """Sets the outcome of this FinancialStatementOutcomeReportDataEntity.


        :param outcome: The outcome of this FinancialStatementOutcomeReportDataEntity.
        :type outcome: float
        """
        if outcome is None:
            raise ValueError("Invalid value for `outcome`, must not be `None`")

        self._outcome = outcome

    @property
    def percentage(self):
        """Gets the percentage of this FinancialStatementOutcomeReportDataEntity.


        :return: The percentage of this FinancialStatementOutcomeReportDataEntity.
        :rtype: float
        """
        return self._percentage

    @percentage.setter
    def percentage(self, percentage):
        """Sets the percentage of this FinancialStatementOutcomeReportDataEntity.


        :param percentage: The percentage of this FinancialStatementOutcomeReportDataEntity.
        :type percentage: float
        """

        self._percentage = percentage
