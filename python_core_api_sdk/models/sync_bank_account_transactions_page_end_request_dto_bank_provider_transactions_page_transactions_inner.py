# coding: utf-8

"""
    Sofia Api

    Api principal do sistema Sofia.

    The version of the OpenAPI document: 1.0.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from python_core_api_sdk.models.sync_bank_account_transactions_page_end_request_dto_bank_provider_transactions_page_transactions_inner_credit_card_metadata import SyncBankAccountTransactionsPageEndRequestDtoBankProviderTransactionsPageTransactionsInnerCreditCardMetadata
from python_core_api_sdk.models.sync_bank_account_transactions_page_end_request_dto_bank_provider_transactions_page_transactions_inner_payment_data import SyncBankAccountTransactionsPageEndRequestDtoBankProviderTransactionsPageTransactionsInnerPaymentData
from typing import Optional, Set
from typing_extensions import Self

class SyncBankAccountTransactionsPageEndRequestDtoBankProviderTransactionsPageTransactionsInner(BaseModel):
    """
    SyncBankAccountTransactionsPageEndRequestDtoBankProviderTransactionsPageTransactionsInner
    """ # noqa: E501
    id: StrictStr
    description: StrictStr
    posted_date: Optional[Any] = Field(alias="postedDate")
    amount: StrictInt
    direction_nature: StrictStr = Field(alias="directionNature")
    status: StrictStr
    category_id: Optional[StrictStr] = Field(default=None, alias="categoryId")
    category_name: Optional[StrictStr] = Field(default=None, alias="categoryName")
    payment_data: Optional[SyncBankAccountTransactionsPageEndRequestDtoBankProviderTransactionsPageTransactionsInnerPaymentData] = Field(default=None, alias="paymentData")
    credit_card_metadata: Optional[SyncBankAccountTransactionsPageEndRequestDtoBankProviderTransactionsPageTransactionsInnerCreditCardMetadata] = Field(default=None, alias="creditCardMetadata")
    __properties: ClassVar[List[str]] = ["id", "description", "postedDate", "amount", "directionNature", "status", "categoryId", "categoryName", "paymentData", "creditCardMetadata"]

    @field_validator('direction_nature')
    def direction_nature_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['CREDIT', 'DEBIT', 'UNDEFINED']):
            raise ValueError("must be one of enum values ('CREDIT', 'DEBIT', 'UNDEFINED')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['PENDING', 'POSTED']):
            raise ValueError("must be one of enum values ('PENDING', 'POSTED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SyncBankAccountTransactionsPageEndRequestDtoBankProviderTransactionsPageTransactionsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of payment_data
        if self.payment_data:
            _dict['paymentData'] = self.payment_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of credit_card_metadata
        if self.credit_card_metadata:
            _dict['creditCardMetadata'] = self.credit_card_metadata.to_dict()
        # set to None if posted_date (nullable) is None
        # and model_fields_set contains the field
        if self.posted_date is None and "posted_date" in self.model_fields_set:
            _dict['postedDate'] = None

        # set to None if category_id (nullable) is None
        # and model_fields_set contains the field
        if self.category_id is None and "category_id" in self.model_fields_set:
            _dict['categoryId'] = None

        # set to None if category_name (nullable) is None
        # and model_fields_set contains the field
        if self.category_name is None and "category_name" in self.model_fields_set:
            _dict['categoryName'] = None

        # set to None if payment_data (nullable) is None
        # and model_fields_set contains the field
        if self.payment_data is None and "payment_data" in self.model_fields_set:
            _dict['paymentData'] = None

        # set to None if credit_card_metadata (nullable) is None
        # and model_fields_set contains the field
        if self.credit_card_metadata is None and "credit_card_metadata" in self.model_fields_set:
            _dict['creditCardMetadata'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SyncBankAccountTransactionsPageEndRequestDtoBankProviderTransactionsPageTransactionsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "description": obj.get("description"),
            "postedDate": obj.get("postedDate"),
            "amount": obj.get("amount"),
            "directionNature": obj.get("directionNature"),
            "status": obj.get("status"),
            "categoryId": obj.get("categoryId"),
            "categoryName": obj.get("categoryName"),
            "paymentData": SyncBankAccountTransactionsPageEndRequestDtoBankProviderTransactionsPageTransactionsInnerPaymentData.from_dict(obj["paymentData"]) if obj.get("paymentData") is not None else None,
            "creditCardMetadata": SyncBankAccountTransactionsPageEndRequestDtoBankProviderTransactionsPageTransactionsInnerCreditCardMetadata.from_dict(obj["creditCardMetadata"]) if obj.get("creditCardMetadata") is not None else None
        })
        return _obj


