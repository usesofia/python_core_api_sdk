# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from python_core_api_sdk.models.base_model import Model
from python_core_api_sdk import util


class AiChatFeatureSpecificationEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, enabled: bool=None, subscription_product_id: str=None):
        """AiChatFeatureSpecificationEntity - a model defined in OpenAPI

        :param id: The id of this AiChatFeatureSpecificationEntity.
        :param enabled: The enabled of this AiChatFeatureSpecificationEntity.
        :param subscription_product_id: The subscription_product_id of this AiChatFeatureSpecificationEntity.
        """
        self.openapi_types = {
            'id': str,
            'enabled': bool,
            'subscription_product_id': str
        }

        self.attribute_map = {
            'id': 'id',
            'enabled': 'enabled',
            'subscription_product_id': 'subscriptionProductId'
        }

        self._id = id
        self._enabled = enabled
        self._subscription_product_id = subscription_product_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AiChatFeatureSpecificationEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AiChatFeatureSpecificationEntity of this AiChatFeatureSpecificationEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this AiChatFeatureSpecificationEntity.


        :return: The id of this AiChatFeatureSpecificationEntity.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AiChatFeatureSpecificationEntity.


        :param id: The id of this AiChatFeatureSpecificationEntity.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def enabled(self):
        """Gets the enabled of this AiChatFeatureSpecificationEntity.


        :return: The enabled of this AiChatFeatureSpecificationEntity.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this AiChatFeatureSpecificationEntity.


        :param enabled: The enabled of this AiChatFeatureSpecificationEntity.
        :type enabled: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")

        self._enabled = enabled

    @property
    def subscription_product_id(self):
        """Gets the subscription_product_id of this AiChatFeatureSpecificationEntity.


        :return: The subscription_product_id of this AiChatFeatureSpecificationEntity.
        :rtype: str
        """
        return self._subscription_product_id

    @subscription_product_id.setter
    def subscription_product_id(self, subscription_product_id):
        """Sets the subscription_product_id of this AiChatFeatureSpecificationEntity.


        :param subscription_product_id: The subscription_product_id of this AiChatFeatureSpecificationEntity.
        :type subscription_product_id: str
        """
        if subscription_product_id is None:
            raise ValueError("Invalid value for `subscription_product_id`, must not be `None`")

        self._subscription_product_id = subscription_product_id
