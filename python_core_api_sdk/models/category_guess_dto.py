# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from python_core_api_sdk.models.base_model import Model
from python_core_api_sdk import util


class CategoryGuessDto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category_id: str=None, name: str=None, score: float=None, origin: str=None):
        """CategoryGuessDto - a model defined in OpenAPI

        :param category_id: The category_id of this CategoryGuessDto.
        :param name: The name of this CategoryGuessDto.
        :param score: The score of this CategoryGuessDto.
        :param origin: The origin of this CategoryGuessDto.
        """
        self.openapi_types = {
            'category_id': str,
            'name': str,
            'score': float,
            'origin': str
        }

        self.attribute_map = {
            'category_id': 'categoryId',
            'name': 'name',
            'score': 'score',
            'origin': 'origin'
        }

        self._category_id = category_id
        self._name = name
        self._score = score
        self._origin = origin

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CategoryGuessDto':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CategoryGuessDto of this CategoryGuessDto.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category_id(self):
        """Gets the category_id of this CategoryGuessDto.


        :return: The category_id of this CategoryGuessDto.
        :rtype: str
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this CategoryGuessDto.


        :param category_id: The category_id of this CategoryGuessDto.
        :type category_id: str
        """
        if category_id is None:
            raise ValueError("Invalid value for `category_id`, must not be `None`")

        self._category_id = category_id

    @property
    def name(self):
        """Gets the name of this CategoryGuessDto.


        :return: The name of this CategoryGuessDto.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CategoryGuessDto.


        :param name: The name of this CategoryGuessDto.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def score(self):
        """Gets the score of this CategoryGuessDto.


        :return: The score of this CategoryGuessDto.
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this CategoryGuessDto.


        :param score: The score of this CategoryGuessDto.
        :type score: float
        """
        if score is None:
            raise ValueError("Invalid value for `score`, must not be `None`")

        self._score = score

    @property
    def origin(self):
        """Gets the origin of this CategoryGuessDto.


        :return: The origin of this CategoryGuessDto.
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this CategoryGuessDto.


        :param origin: The origin of this CategoryGuessDto.
        :type origin: str
        """
        if origin is None:
            raise ValueError("Invalid value for `origin`, must not be `None`")

        self._origin = origin
