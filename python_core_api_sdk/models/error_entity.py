# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from python_core_api_sdk.models.base_model import Model
from python_core_api_sdk import util


class ErrorEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, field_id: str=None, messages: List[str]=None):
        """ErrorEntity - a model defined in OpenAPI

        :param field_id: The field_id of this ErrorEntity.
        :param messages: The messages of this ErrorEntity.
        """
        self.openapi_types = {
            'field_id': str,
            'messages': List[str]
        }

        self.attribute_map = {
            'field_id': 'fieldId',
            'messages': 'messages'
        }

        self._field_id = field_id
        self._messages = messages

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ErrorEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ErrorEntity of this ErrorEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def field_id(self):
        """Gets the field_id of this ErrorEntity.


        :return: The field_id of this ErrorEntity.
        :rtype: str
        """
        return self._field_id

    @field_id.setter
    def field_id(self, field_id):
        """Sets the field_id of this ErrorEntity.


        :param field_id: The field_id of this ErrorEntity.
        :type field_id: str
        """
        if field_id is None:
            raise ValueError("Invalid value for `field_id`, must not be `None`")

        self._field_id = field_id

    @property
    def messages(self):
        """Gets the messages of this ErrorEntity.


        :return: The messages of this ErrorEntity.
        :rtype: List[str]
        """
        return self._messages

    @messages.setter
    def messages(self, messages):
        """Sets the messages of this ErrorEntity.


        :param messages: The messages of this ErrorEntity.
        :type messages: List[str]
        """
        if messages is None:
            raise ValueError("Invalid value for `messages`, must not be `None`")

        self._messages = messages
