# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from python_core_api_sdk.models.base_model import Model
from python_core_api_sdk.models.error_entity import ErrorEntity
from python_core_api_sdk import util


class ExceptionResponseEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, status_code: float=None, message: str=None, errors: List[ErrorEntity]=None):
        """ExceptionResponseEntity - a model defined in OpenAPI

        :param status_code: The status_code of this ExceptionResponseEntity.
        :param message: The message of this ExceptionResponseEntity.
        :param errors: The errors of this ExceptionResponseEntity.
        """
        self.openapi_types = {
            'status_code': float,
            'message': str,
            'errors': List[ErrorEntity]
        }

        self.attribute_map = {
            'status_code': 'statusCode',
            'message': 'message',
            'errors': 'errors'
        }

        self._status_code = status_code
        self._message = message
        self._errors = errors

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExceptionResponseEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExceptionResponseEntity of this ExceptionResponseEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def status_code(self):
        """Gets the status_code of this ExceptionResponseEntity.


        :return: The status_code of this ExceptionResponseEntity.
        :rtype: float
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this ExceptionResponseEntity.


        :param status_code: The status_code of this ExceptionResponseEntity.
        :type status_code: float
        """
        if status_code is None:
            raise ValueError("Invalid value for `status_code`, must not be `None`")

        self._status_code = status_code

    @property
    def message(self):
        """Gets the message of this ExceptionResponseEntity.


        :return: The message of this ExceptionResponseEntity.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ExceptionResponseEntity.


        :param message: The message of this ExceptionResponseEntity.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message

    @property
    def errors(self):
        """Gets the errors of this ExceptionResponseEntity.


        :return: The errors of this ExceptionResponseEntity.
        :rtype: List[ErrorEntity]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this ExceptionResponseEntity.


        :param errors: The errors of this ExceptionResponseEntity.
        :type errors: List[ErrorEntity]
        """
        if errors is None:
            raise ValueError("Invalid value for `errors`, must not be `None`")

        self._errors = errors
