# coding: utf-8

"""
    Sofia Api

    Api principal do sistema Sofia.

    The version of the OpenAPI document: 0.0.9
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from python_core_api_sdk.models.ai_chat_feature_specification_entity import AiChatFeatureSpecificationEntity
from python_core_api_sdk.models.connection_feature_specification_entity import ConnectionFeatureSpecificationEntity
from python_core_api_sdk.models.financial_transactions_feature_specification_entity import FinancialTransactionsFeatureSpecificationEntity
from python_core_api_sdk.models.payments_manager_product_data_entity import PaymentsManagerProductDataEntity
from typing import Optional, Set
from typing_extensions import Self

class SubscriptionProductEntity(BaseModel):
    """
    SubscriptionProductEntity
    """ # noqa: E501
    id: StrictStr
    payment_system: StrictStr = Field(alias="paymentSystem")
    payment_system_product_id: StrictStr = Field(alias="paymentSystemProductId")
    workspace_type: StrictStr = Field(alias="workspaceType")
    trial_period_in_days: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="trialPeriodInDays")
    trial_already_used: Optional[StrictBool] = Field(default=None, alias="trialAlreadyUsed")
    connection_feature_specification: ConnectionFeatureSpecificationEntity = Field(alias="connectionFeatureSpecification")
    financial_transactions_feature_specification: FinancialTransactionsFeatureSpecificationEntity = Field(alias="financialTransactionsFeatureSpecification")
    ai_chat_feature_specification: AiChatFeatureSpecificationEntity = Field(alias="aiChatFeatureSpecification")
    payments_manager_data: PaymentsManagerProductDataEntity = Field(alias="paymentsManagerData")
    __properties: ClassVar[List[str]] = ["id", "paymentSystem", "paymentSystemProductId", "workspaceType", "trialPeriodInDays", "trialAlreadyUsed", "connectionFeatureSpecification", "financialTransactionsFeatureSpecification", "aiChatFeatureSpecification", "paymentsManagerData"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SubscriptionProductEntity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of connection_feature_specification
        if self.connection_feature_specification:
            _dict['connectionFeatureSpecification'] = self.connection_feature_specification.to_dict()
        # override the default output from pydantic by calling `to_dict()` of financial_transactions_feature_specification
        if self.financial_transactions_feature_specification:
            _dict['financialTransactionsFeatureSpecification'] = self.financial_transactions_feature_specification.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ai_chat_feature_specification
        if self.ai_chat_feature_specification:
            _dict['aiChatFeatureSpecification'] = self.ai_chat_feature_specification.to_dict()
        # override the default output from pydantic by calling `to_dict()` of payments_manager_data
        if self.payments_manager_data:
            _dict['paymentsManagerData'] = self.payments_manager_data.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SubscriptionProductEntity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "paymentSystem": obj.get("paymentSystem"),
            "paymentSystemProductId": obj.get("paymentSystemProductId"),
            "workspaceType": obj.get("workspaceType"),
            "trialPeriodInDays": obj.get("trialPeriodInDays"),
            "trialAlreadyUsed": obj.get("trialAlreadyUsed"),
            "connectionFeatureSpecification": ConnectionFeatureSpecificationEntity.from_dict(obj["connectionFeatureSpecification"]) if obj.get("connectionFeatureSpecification") is not None else None,
            "financialTransactionsFeatureSpecification": FinancialTransactionsFeatureSpecificationEntity.from_dict(obj["financialTransactionsFeatureSpecification"]) if obj.get("financialTransactionsFeatureSpecification") is not None else None,
            "aiChatFeatureSpecification": AiChatFeatureSpecificationEntity.from_dict(obj["aiChatFeatureSpecification"]) if obj.get("aiChatFeatureSpecification") is not None else None,
            "paymentsManagerData": PaymentsManagerProductDataEntity.from_dict(obj["paymentsManagerData"]) if obj.get("paymentsManagerData") is not None else None
        })
        return _obj


