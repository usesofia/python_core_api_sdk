# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from python_core_api_sdk.models.base_model import Model
from python_core_api_sdk.models.ai_chat_feature_specification_entity import AiChatFeatureSpecificationEntity
from python_core_api_sdk.models.connection_feature_specification_entity import ConnectionFeatureSpecificationEntity
from python_core_api_sdk.models.financial_transactions_feature_specification_entity import FinancialTransactionsFeatureSpecificationEntity
from python_core_api_sdk.models.payments_manager_product_data_entity import PaymentsManagerProductDataEntity
from python_core_api_sdk import util


class SubscriptionProductEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, payment_system: str=None, payment_system_product_id: str=None, workspace_type: str=None, trial_period_in_days: float=None, trial_already_used: bool=None, connection_feature_specification: ConnectionFeatureSpecificationEntity=None, financial_transactions_feature_specification: FinancialTransactionsFeatureSpecificationEntity=None, ai_chat_feature_specification: AiChatFeatureSpecificationEntity=None, payments_manager_data: PaymentsManagerProductDataEntity=None):
        """SubscriptionProductEntity - a model defined in OpenAPI

        :param id: The id of this SubscriptionProductEntity.
        :param payment_system: The payment_system of this SubscriptionProductEntity.
        :param payment_system_product_id: The payment_system_product_id of this SubscriptionProductEntity.
        :param workspace_type: The workspace_type of this SubscriptionProductEntity.
        :param trial_period_in_days: The trial_period_in_days of this SubscriptionProductEntity.
        :param trial_already_used: The trial_already_used of this SubscriptionProductEntity.
        :param connection_feature_specification: The connection_feature_specification of this SubscriptionProductEntity.
        :param financial_transactions_feature_specification: The financial_transactions_feature_specification of this SubscriptionProductEntity.
        :param ai_chat_feature_specification: The ai_chat_feature_specification of this SubscriptionProductEntity.
        :param payments_manager_data: The payments_manager_data of this SubscriptionProductEntity.
        """
        self.openapi_types = {
            'id': str,
            'payment_system': str,
            'payment_system_product_id': str,
            'workspace_type': str,
            'trial_period_in_days': float,
            'trial_already_used': bool,
            'connection_feature_specification': ConnectionFeatureSpecificationEntity,
            'financial_transactions_feature_specification': FinancialTransactionsFeatureSpecificationEntity,
            'ai_chat_feature_specification': AiChatFeatureSpecificationEntity,
            'payments_manager_data': PaymentsManagerProductDataEntity
        }

        self.attribute_map = {
            'id': 'id',
            'payment_system': 'paymentSystem',
            'payment_system_product_id': 'paymentSystemProductId',
            'workspace_type': 'workspaceType',
            'trial_period_in_days': 'trialPeriodInDays',
            'trial_already_used': 'trialAlreadyUsed',
            'connection_feature_specification': 'connectionFeatureSpecification',
            'financial_transactions_feature_specification': 'financialTransactionsFeatureSpecification',
            'ai_chat_feature_specification': 'aiChatFeatureSpecification',
            'payments_manager_data': 'paymentsManagerData'
        }

        self._id = id
        self._payment_system = payment_system
        self._payment_system_product_id = payment_system_product_id
        self._workspace_type = workspace_type
        self._trial_period_in_days = trial_period_in_days
        self._trial_already_used = trial_already_used
        self._connection_feature_specification = connection_feature_specification
        self._financial_transactions_feature_specification = financial_transactions_feature_specification
        self._ai_chat_feature_specification = ai_chat_feature_specification
        self._payments_manager_data = payments_manager_data

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubscriptionProductEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SubscriptionProductEntity of this SubscriptionProductEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this SubscriptionProductEntity.


        :return: The id of this SubscriptionProductEntity.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SubscriptionProductEntity.


        :param id: The id of this SubscriptionProductEntity.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def payment_system(self):
        """Gets the payment_system of this SubscriptionProductEntity.


        :return: The payment_system of this SubscriptionProductEntity.
        :rtype: str
        """
        return self._payment_system

    @payment_system.setter
    def payment_system(self, payment_system):
        """Sets the payment_system of this SubscriptionProductEntity.


        :param payment_system: The payment_system of this SubscriptionProductEntity.
        :type payment_system: str
        """
        if payment_system is None:
            raise ValueError("Invalid value for `payment_system`, must not be `None`")

        self._payment_system = payment_system

    @property
    def payment_system_product_id(self):
        """Gets the payment_system_product_id of this SubscriptionProductEntity.


        :return: The payment_system_product_id of this SubscriptionProductEntity.
        :rtype: str
        """
        return self._payment_system_product_id

    @payment_system_product_id.setter
    def payment_system_product_id(self, payment_system_product_id):
        """Sets the payment_system_product_id of this SubscriptionProductEntity.


        :param payment_system_product_id: The payment_system_product_id of this SubscriptionProductEntity.
        :type payment_system_product_id: str
        """
        if payment_system_product_id is None:
            raise ValueError("Invalid value for `payment_system_product_id`, must not be `None`")

        self._payment_system_product_id = payment_system_product_id

    @property
    def workspace_type(self):
        """Gets the workspace_type of this SubscriptionProductEntity.


        :return: The workspace_type of this SubscriptionProductEntity.
        :rtype: str
        """
        return self._workspace_type

    @workspace_type.setter
    def workspace_type(self, workspace_type):
        """Sets the workspace_type of this SubscriptionProductEntity.


        :param workspace_type: The workspace_type of this SubscriptionProductEntity.
        :type workspace_type: str
        """
        if workspace_type is None:
            raise ValueError("Invalid value for `workspace_type`, must not be `None`")

        self._workspace_type = workspace_type

    @property
    def trial_period_in_days(self):
        """Gets the trial_period_in_days of this SubscriptionProductEntity.


        :return: The trial_period_in_days of this SubscriptionProductEntity.
        :rtype: float
        """
        return self._trial_period_in_days

    @trial_period_in_days.setter
    def trial_period_in_days(self, trial_period_in_days):
        """Sets the trial_period_in_days of this SubscriptionProductEntity.


        :param trial_period_in_days: The trial_period_in_days of this SubscriptionProductEntity.
        :type trial_period_in_days: float
        """

        self._trial_period_in_days = trial_period_in_days

    @property
    def trial_already_used(self):
        """Gets the trial_already_used of this SubscriptionProductEntity.


        :return: The trial_already_used of this SubscriptionProductEntity.
        :rtype: bool
        """
        return self._trial_already_used

    @trial_already_used.setter
    def trial_already_used(self, trial_already_used):
        """Sets the trial_already_used of this SubscriptionProductEntity.


        :param trial_already_used: The trial_already_used of this SubscriptionProductEntity.
        :type trial_already_used: bool
        """

        self._trial_already_used = trial_already_used

    @property
    def connection_feature_specification(self):
        """Gets the connection_feature_specification of this SubscriptionProductEntity.


        :return: The connection_feature_specification of this SubscriptionProductEntity.
        :rtype: ConnectionFeatureSpecificationEntity
        """
        return self._connection_feature_specification

    @connection_feature_specification.setter
    def connection_feature_specification(self, connection_feature_specification):
        """Sets the connection_feature_specification of this SubscriptionProductEntity.


        :param connection_feature_specification: The connection_feature_specification of this SubscriptionProductEntity.
        :type connection_feature_specification: ConnectionFeatureSpecificationEntity
        """
        if connection_feature_specification is None:
            raise ValueError("Invalid value for `connection_feature_specification`, must not be `None`")

        self._connection_feature_specification = connection_feature_specification

    @property
    def financial_transactions_feature_specification(self):
        """Gets the financial_transactions_feature_specification of this SubscriptionProductEntity.


        :return: The financial_transactions_feature_specification of this SubscriptionProductEntity.
        :rtype: FinancialTransactionsFeatureSpecificationEntity
        """
        return self._financial_transactions_feature_specification

    @financial_transactions_feature_specification.setter
    def financial_transactions_feature_specification(self, financial_transactions_feature_specification):
        """Sets the financial_transactions_feature_specification of this SubscriptionProductEntity.


        :param financial_transactions_feature_specification: The financial_transactions_feature_specification of this SubscriptionProductEntity.
        :type financial_transactions_feature_specification: FinancialTransactionsFeatureSpecificationEntity
        """
        if financial_transactions_feature_specification is None:
            raise ValueError("Invalid value for `financial_transactions_feature_specification`, must not be `None`")

        self._financial_transactions_feature_specification = financial_transactions_feature_specification

    @property
    def ai_chat_feature_specification(self):
        """Gets the ai_chat_feature_specification of this SubscriptionProductEntity.


        :return: The ai_chat_feature_specification of this SubscriptionProductEntity.
        :rtype: AiChatFeatureSpecificationEntity
        """
        return self._ai_chat_feature_specification

    @ai_chat_feature_specification.setter
    def ai_chat_feature_specification(self, ai_chat_feature_specification):
        """Sets the ai_chat_feature_specification of this SubscriptionProductEntity.


        :param ai_chat_feature_specification: The ai_chat_feature_specification of this SubscriptionProductEntity.
        :type ai_chat_feature_specification: AiChatFeatureSpecificationEntity
        """
        if ai_chat_feature_specification is None:
            raise ValueError("Invalid value for `ai_chat_feature_specification`, must not be `None`")

        self._ai_chat_feature_specification = ai_chat_feature_specification

    @property
    def payments_manager_data(self):
        """Gets the payments_manager_data of this SubscriptionProductEntity.


        :return: The payments_manager_data of this SubscriptionProductEntity.
        :rtype: PaymentsManagerProductDataEntity
        """
        return self._payments_manager_data

    @payments_manager_data.setter
    def payments_manager_data(self, payments_manager_data):
        """Sets the payments_manager_data of this SubscriptionProductEntity.


        :param payments_manager_data: The payments_manager_data of this SubscriptionProductEntity.
        :type payments_manager_data: PaymentsManagerProductDataEntity
        """
        if payments_manager_data is None:
            raise ValueError("Invalid value for `payments_manager_data`, must not be `None`")

        self._payments_manager_data = payments_manager_data
