# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from python_core_api_sdk.models.base_model import Model
from python_core_api_sdk import util


class BankAccountsBalanceReportItemEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, total_balance: float=None, currency_code: str=None):
        """BankAccountsBalanceReportItemEntity - a model defined in OpenAPI

        :param total_balance: The total_balance of this BankAccountsBalanceReportItemEntity.
        :param currency_code: The currency_code of this BankAccountsBalanceReportItemEntity.
        """
        self.openapi_types = {
            'total_balance': float,
            'currency_code': str
        }

        self.attribute_map = {
            'total_balance': 'totalBalance',
            'currency_code': 'currencyCode'
        }

        self._total_balance = total_balance
        self._currency_code = currency_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BankAccountsBalanceReportItemEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BankAccountsBalanceReportItemEntity of this BankAccountsBalanceReportItemEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def total_balance(self):
        """Gets the total_balance of this BankAccountsBalanceReportItemEntity.


        :return: The total_balance of this BankAccountsBalanceReportItemEntity.
        :rtype: float
        """
        return self._total_balance

    @total_balance.setter
    def total_balance(self, total_balance):
        """Sets the total_balance of this BankAccountsBalanceReportItemEntity.


        :param total_balance: The total_balance of this BankAccountsBalanceReportItemEntity.
        :type total_balance: float
        """
        if total_balance is None:
            raise ValueError("Invalid value for `total_balance`, must not be `None`")

        self._total_balance = total_balance

    @property
    def currency_code(self):
        """Gets the currency_code of this BankAccountsBalanceReportItemEntity.


        :return: The currency_code of this BankAccountsBalanceReportItemEntity.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this BankAccountsBalanceReportItemEntity.


        :param currency_code: The currency_code of this BankAccountsBalanceReportItemEntity.
        :type currency_code: str
        """
        if currency_code is None:
            raise ValueError("Invalid value for `currency_code`, must not be `None`")

        self._currency_code = currency_code
