# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from python_core_api_sdk.models.base_model import Model
from python_core_api_sdk import util


class BankConnectorEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, provider: str=None, name: str=None, institution_url: str=None, image_url: str=None, primary_color: str=None, type: str=None, country: str=None, created_at: datetime=None, updated_at: datetime=None):
        """BankConnectorEntity - a model defined in OpenAPI

        :param id: The id of this BankConnectorEntity.
        :param provider: The provider of this BankConnectorEntity.
        :param name: The name of this BankConnectorEntity.
        :param institution_url: The institution_url of this BankConnectorEntity.
        :param image_url: The image_url of this BankConnectorEntity.
        :param primary_color: The primary_color of this BankConnectorEntity.
        :param type: The type of this BankConnectorEntity.
        :param country: The country of this BankConnectorEntity.
        :param created_at: The created_at of this BankConnectorEntity.
        :param updated_at: The updated_at of this BankConnectorEntity.
        """
        self.openapi_types = {
            'id': str,
            'provider': str,
            'name': str,
            'institution_url': str,
            'image_url': str,
            'primary_color': str,
            'type': str,
            'country': str,
            'created_at': datetime,
            'updated_at': datetime
        }

        self.attribute_map = {
            'id': 'id',
            'provider': 'provider',
            'name': 'name',
            'institution_url': 'institutionUrl',
            'image_url': 'imageUrl',
            'primary_color': 'primaryColor',
            'type': 'type',
            'country': 'country',
            'created_at': 'createdAt',
            'updated_at': 'updatedAt'
        }

        self._id = id
        self._provider = provider
        self._name = name
        self._institution_url = institution_url
        self._image_url = image_url
        self._primary_color = primary_color
        self._type = type
        self._country = country
        self._created_at = created_at
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BankConnectorEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BankConnectorEntity of this BankConnectorEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this BankConnectorEntity.


        :return: The id of this BankConnectorEntity.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BankConnectorEntity.


        :param id: The id of this BankConnectorEntity.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def provider(self):
        """Gets the provider of this BankConnectorEntity.


        :return: The provider of this BankConnectorEntity.
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this BankConnectorEntity.


        :param provider: The provider of this BankConnectorEntity.
        :type provider: str
        """
        if provider is None:
            raise ValueError("Invalid value for `provider`, must not be `None`")

        self._provider = provider

    @property
    def name(self):
        """Gets the name of this BankConnectorEntity.


        :return: The name of this BankConnectorEntity.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BankConnectorEntity.


        :param name: The name of this BankConnectorEntity.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def institution_url(self):
        """Gets the institution_url of this BankConnectorEntity.


        :return: The institution_url of this BankConnectorEntity.
        :rtype: str
        """
        return self._institution_url

    @institution_url.setter
    def institution_url(self, institution_url):
        """Sets the institution_url of this BankConnectorEntity.


        :param institution_url: The institution_url of this BankConnectorEntity.
        :type institution_url: str
        """
        if institution_url is None:
            raise ValueError("Invalid value for `institution_url`, must not be `None`")

        self._institution_url = institution_url

    @property
    def image_url(self):
        """Gets the image_url of this BankConnectorEntity.


        :return: The image_url of this BankConnectorEntity.
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this BankConnectorEntity.


        :param image_url: The image_url of this BankConnectorEntity.
        :type image_url: str
        """
        if image_url is None:
            raise ValueError("Invalid value for `image_url`, must not be `None`")

        self._image_url = image_url

    @property
    def primary_color(self):
        """Gets the primary_color of this BankConnectorEntity.


        :return: The primary_color of this BankConnectorEntity.
        :rtype: str
        """
        return self._primary_color

    @primary_color.setter
    def primary_color(self, primary_color):
        """Sets the primary_color of this BankConnectorEntity.


        :param primary_color: The primary_color of this BankConnectorEntity.
        :type primary_color: str
        """
        if primary_color is None:
            raise ValueError("Invalid value for `primary_color`, must not be `None`")

        self._primary_color = primary_color

    @property
    def type(self):
        """Gets the type of this BankConnectorEntity.


        :return: The type of this BankConnectorEntity.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BankConnectorEntity.


        :param type: The type of this BankConnectorEntity.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def country(self):
        """Gets the country of this BankConnectorEntity.


        :return: The country of this BankConnectorEntity.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this BankConnectorEntity.


        :param country: The country of this BankConnectorEntity.
        :type country: str
        """
        if country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")

        self._country = country

    @property
    def created_at(self):
        """Gets the created_at of this BankConnectorEntity.


        :return: The created_at of this BankConnectorEntity.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this BankConnectorEntity.


        :param created_at: The created_at of this BankConnectorEntity.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this BankConnectorEntity.


        :return: The updated_at of this BankConnectorEntity.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this BankConnectorEntity.


        :param updated_at: The updated_at of this BankConnectorEntity.
        :type updated_at: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at
