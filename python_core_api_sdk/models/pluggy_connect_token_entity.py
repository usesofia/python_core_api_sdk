# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from python_core_api_sdk.models.base_model import Model
from python_core_api_sdk import util


class PluggyConnectTokenEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_token: str=None):
        """PluggyConnectTokenEntity - a model defined in OpenAPI

        :param access_token: The access_token of this PluggyConnectTokenEntity.
        """
        self.openapi_types = {
            'access_token': str
        }

        self.attribute_map = {
            'access_token': 'accessToken'
        }

        self._access_token = access_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PluggyConnectTokenEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PluggyConnectTokenEntity of this PluggyConnectTokenEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_token(self):
        """Gets the access_token of this PluggyConnectTokenEntity.


        :return: The access_token of this PluggyConnectTokenEntity.
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """Sets the access_token of this PluggyConnectTokenEntity.


        :param access_token: The access_token of this PluggyConnectTokenEntity.
        :type access_token: str
        """
        if access_token is None:
            raise ValueError("Invalid value for `access_token`, must not be `None`")

        self._access_token = access_token
