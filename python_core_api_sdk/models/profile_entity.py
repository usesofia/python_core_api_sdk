# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from python_core_api_sdk.models.base_model import Model
from python_core_api_sdk import util


class ProfileEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, full_name: str=None, phone: str=None, birth_date: datetime=None, user_id: str=None, created_at: datetime=None, updated_at: datetime=None):
        """ProfileEntity - a model defined in OpenAPI

        :param id: The id of this ProfileEntity.
        :param full_name: The full_name of this ProfileEntity.
        :param phone: The phone of this ProfileEntity.
        :param birth_date: The birth_date of this ProfileEntity.
        :param user_id: The user_id of this ProfileEntity.
        :param created_at: The created_at of this ProfileEntity.
        :param updated_at: The updated_at of this ProfileEntity.
        """
        self.openapi_types = {
            'id': str,
            'full_name': str,
            'phone': str,
            'birth_date': datetime,
            'user_id': str,
            'created_at': datetime,
            'updated_at': datetime
        }

        self.attribute_map = {
            'id': 'id',
            'full_name': 'fullName',
            'phone': 'phone',
            'birth_date': 'birthDate',
            'user_id': 'userId',
            'created_at': 'createdAt',
            'updated_at': 'updatedAt'
        }

        self._id = id
        self._full_name = full_name
        self._phone = phone
        self._birth_date = birth_date
        self._user_id = user_id
        self._created_at = created_at
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProfileEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProfileEntity of this ProfileEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this ProfileEntity.


        :return: The id of this ProfileEntity.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProfileEntity.


        :param id: The id of this ProfileEntity.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def full_name(self):
        """Gets the full_name of this ProfileEntity.


        :return: The full_name of this ProfileEntity.
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this ProfileEntity.


        :param full_name: The full_name of this ProfileEntity.
        :type full_name: str
        """
        if full_name is None:
            raise ValueError("Invalid value for `full_name`, must not be `None`")

        self._full_name = full_name

    @property
    def phone(self):
        """Gets the phone of this ProfileEntity.


        :return: The phone of this ProfileEntity.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this ProfileEntity.


        :param phone: The phone of this ProfileEntity.
        :type phone: str
        """
        if phone is None:
            raise ValueError("Invalid value for `phone`, must not be `None`")

        self._phone = phone

    @property
    def birth_date(self):
        """Gets the birth_date of this ProfileEntity.


        :return: The birth_date of this ProfileEntity.
        :rtype: datetime
        """
        return self._birth_date

    @birth_date.setter
    def birth_date(self, birth_date):
        """Sets the birth_date of this ProfileEntity.


        :param birth_date: The birth_date of this ProfileEntity.
        :type birth_date: datetime
        """
        if birth_date is None:
            raise ValueError("Invalid value for `birth_date`, must not be `None`")

        self._birth_date = birth_date

    @property
    def user_id(self):
        """Gets the user_id of this ProfileEntity.


        :return: The user_id of this ProfileEntity.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this ProfileEntity.


        :param user_id: The user_id of this ProfileEntity.
        :type user_id: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")

        self._user_id = user_id

    @property
    def created_at(self):
        """Gets the created_at of this ProfileEntity.


        :return: The created_at of this ProfileEntity.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ProfileEntity.


        :param created_at: The created_at of this ProfileEntity.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this ProfileEntity.


        :return: The updated_at of this ProfileEntity.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this ProfileEntity.


        :param updated_at: The updated_at of this ProfileEntity.
        :type updated_at: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at
