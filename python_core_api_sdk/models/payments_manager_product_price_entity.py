# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from python_core_api_sdk.models.base_model import Model
from python_core_api_sdk import util


class PaymentsManagerProductPriceEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, active: bool=None, unit_amount: float=None, interval: str=None):
        """PaymentsManagerProductPriceEntity - a model defined in OpenAPI

        :param id: The id of this PaymentsManagerProductPriceEntity.
        :param active: The active of this PaymentsManagerProductPriceEntity.
        :param unit_amount: The unit_amount of this PaymentsManagerProductPriceEntity.
        :param interval: The interval of this PaymentsManagerProductPriceEntity.
        """
        self.openapi_types = {
            'id': str,
            'active': bool,
            'unit_amount': float,
            'interval': str
        }

        self.attribute_map = {
            'id': 'id',
            'active': 'active',
            'unit_amount': 'unitAmount',
            'interval': 'interval'
        }

        self._id = id
        self._active = active
        self._unit_amount = unit_amount
        self._interval = interval

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaymentsManagerProductPriceEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PaymentsManagerProductPriceEntity of this PaymentsManagerProductPriceEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this PaymentsManagerProductPriceEntity.


        :return: The id of this PaymentsManagerProductPriceEntity.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PaymentsManagerProductPriceEntity.


        :param id: The id of this PaymentsManagerProductPriceEntity.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def active(self):
        """Gets the active of this PaymentsManagerProductPriceEntity.


        :return: The active of this PaymentsManagerProductPriceEntity.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this PaymentsManagerProductPriceEntity.


        :param active: The active of this PaymentsManagerProductPriceEntity.
        :type active: bool
        """
        if active is None:
            raise ValueError("Invalid value for `active`, must not be `None`")

        self._active = active

    @property
    def unit_amount(self):
        """Gets the unit_amount of this PaymentsManagerProductPriceEntity.


        :return: The unit_amount of this PaymentsManagerProductPriceEntity.
        :rtype: float
        """
        return self._unit_amount

    @unit_amount.setter
    def unit_amount(self, unit_amount):
        """Sets the unit_amount of this PaymentsManagerProductPriceEntity.


        :param unit_amount: The unit_amount of this PaymentsManagerProductPriceEntity.
        :type unit_amount: float
        """
        if unit_amount is None:
            raise ValueError("Invalid value for `unit_amount`, must not be `None`")

        self._unit_amount = unit_amount

    @property
    def interval(self):
        """Gets the interval of this PaymentsManagerProductPriceEntity.


        :return: The interval of this PaymentsManagerProductPriceEntity.
        :rtype: str
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this PaymentsManagerProductPriceEntity.


        :param interval: The interval of this PaymentsManagerProductPriceEntity.
        :type interval: str
        """
        if interval is None:
            raise ValueError("Invalid value for `interval`, must not be `None`")

        self._interval = interval
