# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from python_core_api_sdk.models.base_model import Model
from python_core_api_sdk.models.balance_point_result_entity import BalancePointResultEntity
from python_core_api_sdk.models.dre_line_outcome_result_entity import DreLineOutcomeResultEntity
from python_core_api_sdk.models.mean_result_entity import MeanResultEntity
from python_core_api_sdk.models.proportion_result_entity import ProportionResultEntity
from python_core_api_sdk import util


class BankTransactionIndicatorEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, pretty_id: str=None, type: str=None, name: str=None, description: str=None, data: object=None, dre_line_outcome_result: DreLineOutcomeResultEntity=None, balance_point_result: BalancePointResultEntity=None, mean_result: MeanResultEntity=None, proportion_result: ProportionResultEntity=None):
        """BankTransactionIndicatorEntity - a model defined in OpenAPI

        :param id: The id of this BankTransactionIndicatorEntity.
        :param pretty_id: The pretty_id of this BankTransactionIndicatorEntity.
        :param type: The type of this BankTransactionIndicatorEntity.
        :param name: The name of this BankTransactionIndicatorEntity.
        :param description: The description of this BankTransactionIndicatorEntity.
        :param data: The data of this BankTransactionIndicatorEntity.
        :param dre_line_outcome_result: The dre_line_outcome_result of this BankTransactionIndicatorEntity.
        :param balance_point_result: The balance_point_result of this BankTransactionIndicatorEntity.
        :param mean_result: The mean_result of this BankTransactionIndicatorEntity.
        :param proportion_result: The proportion_result of this BankTransactionIndicatorEntity.
        """
        self.openapi_types = {
            'id': str,
            'pretty_id': str,
            'type': str,
            'name': str,
            'description': str,
            'data': object,
            'dre_line_outcome_result': DreLineOutcomeResultEntity,
            'balance_point_result': BalancePointResultEntity,
            'mean_result': MeanResultEntity,
            'proportion_result': ProportionResultEntity
        }

        self.attribute_map = {
            'id': 'id',
            'pretty_id': 'prettyId',
            'type': 'type',
            'name': 'name',
            'description': 'description',
            'data': 'data',
            'dre_line_outcome_result': 'dreLineOutcomeResult',
            'balance_point_result': 'balancePointResult',
            'mean_result': 'meanResult',
            'proportion_result': 'proportionResult'
        }

        self._id = id
        self._pretty_id = pretty_id
        self._type = type
        self._name = name
        self._description = description
        self._data = data
        self._dre_line_outcome_result = dre_line_outcome_result
        self._balance_point_result = balance_point_result
        self._mean_result = mean_result
        self._proportion_result = proportion_result

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BankTransactionIndicatorEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BankTransactionIndicatorEntity of this BankTransactionIndicatorEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this BankTransactionIndicatorEntity.


        :return: The id of this BankTransactionIndicatorEntity.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BankTransactionIndicatorEntity.


        :param id: The id of this BankTransactionIndicatorEntity.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def pretty_id(self):
        """Gets the pretty_id of this BankTransactionIndicatorEntity.


        :return: The pretty_id of this BankTransactionIndicatorEntity.
        :rtype: str
        """
        return self._pretty_id

    @pretty_id.setter
    def pretty_id(self, pretty_id):
        """Sets the pretty_id of this BankTransactionIndicatorEntity.


        :param pretty_id: The pretty_id of this BankTransactionIndicatorEntity.
        :type pretty_id: str
        """
        if pretty_id is None:
            raise ValueError("Invalid value for `pretty_id`, must not be `None`")

        self._pretty_id = pretty_id

    @property
    def type(self):
        """Gets the type of this BankTransactionIndicatorEntity.


        :return: The type of this BankTransactionIndicatorEntity.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BankTransactionIndicatorEntity.


        :param type: The type of this BankTransactionIndicatorEntity.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def name(self):
        """Gets the name of this BankTransactionIndicatorEntity.


        :return: The name of this BankTransactionIndicatorEntity.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BankTransactionIndicatorEntity.


        :param name: The name of this BankTransactionIndicatorEntity.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def description(self):
        """Gets the description of this BankTransactionIndicatorEntity.


        :return: The description of this BankTransactionIndicatorEntity.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this BankTransactionIndicatorEntity.


        :param description: The description of this BankTransactionIndicatorEntity.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def data(self):
        """Gets the data of this BankTransactionIndicatorEntity.


        :return: The data of this BankTransactionIndicatorEntity.
        :rtype: object
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this BankTransactionIndicatorEntity.


        :param data: The data of this BankTransactionIndicatorEntity.
        :type data: object
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")

        self._data = data

    @property
    def dre_line_outcome_result(self):
        """Gets the dre_line_outcome_result of this BankTransactionIndicatorEntity.


        :return: The dre_line_outcome_result of this BankTransactionIndicatorEntity.
        :rtype: DreLineOutcomeResultEntity
        """
        return self._dre_line_outcome_result

    @dre_line_outcome_result.setter
    def dre_line_outcome_result(self, dre_line_outcome_result):
        """Sets the dre_line_outcome_result of this BankTransactionIndicatorEntity.


        :param dre_line_outcome_result: The dre_line_outcome_result of this BankTransactionIndicatorEntity.
        :type dre_line_outcome_result: DreLineOutcomeResultEntity
        """

        self._dre_line_outcome_result = dre_line_outcome_result

    @property
    def balance_point_result(self):
        """Gets the balance_point_result of this BankTransactionIndicatorEntity.


        :return: The balance_point_result of this BankTransactionIndicatorEntity.
        :rtype: BalancePointResultEntity
        """
        return self._balance_point_result

    @balance_point_result.setter
    def balance_point_result(self, balance_point_result):
        """Sets the balance_point_result of this BankTransactionIndicatorEntity.


        :param balance_point_result: The balance_point_result of this BankTransactionIndicatorEntity.
        :type balance_point_result: BalancePointResultEntity
        """

        self._balance_point_result = balance_point_result

    @property
    def mean_result(self):
        """Gets the mean_result of this BankTransactionIndicatorEntity.


        :return: The mean_result of this BankTransactionIndicatorEntity.
        :rtype: MeanResultEntity
        """
        return self._mean_result

    @mean_result.setter
    def mean_result(self, mean_result):
        """Sets the mean_result of this BankTransactionIndicatorEntity.


        :param mean_result: The mean_result of this BankTransactionIndicatorEntity.
        :type mean_result: MeanResultEntity
        """

        self._mean_result = mean_result

    @property
    def proportion_result(self):
        """Gets the proportion_result of this BankTransactionIndicatorEntity.


        :return: The proportion_result of this BankTransactionIndicatorEntity.
        :rtype: ProportionResultEntity
        """
        return self._proportion_result

    @proportion_result.setter
    def proportion_result(self, proportion_result):
        """Sets the proportion_result of this BankTransactionIndicatorEntity.


        :param proportion_result: The proportion_result of this BankTransactionIndicatorEntity.
        :type proportion_result: ProportionResultEntity
        """

        self._proportion_result = proportion_result
