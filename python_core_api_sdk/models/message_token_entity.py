# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from python_core_api_sdk.models.base_model import Model
from python_core_api_sdk.models.user_entity import UserEntity
from python_core_api_sdk.models.workspace_entity import WorkspaceEntity
from python_core_api_sdk import util


class MessageTokenEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, workspace_id: str=None, workspace: WorkspaceEntity=None, user_id: str=None, user: UserEntity=None, provider: str=None, platform: str=None, device_id: str=None, token: str=None, created_at: datetime=None, updated_at: datetime=None):
        """MessageTokenEntity - a model defined in OpenAPI

        :param id: The id of this MessageTokenEntity.
        :param workspace_id: The workspace_id of this MessageTokenEntity.
        :param workspace: The workspace of this MessageTokenEntity.
        :param user_id: The user_id of this MessageTokenEntity.
        :param user: The user of this MessageTokenEntity.
        :param provider: The provider of this MessageTokenEntity.
        :param platform: The platform of this MessageTokenEntity.
        :param device_id: The device_id of this MessageTokenEntity.
        :param token: The token of this MessageTokenEntity.
        :param created_at: The created_at of this MessageTokenEntity.
        :param updated_at: The updated_at of this MessageTokenEntity.
        """
        self.openapi_types = {
            'id': str,
            'workspace_id': str,
            'workspace': WorkspaceEntity,
            'user_id': str,
            'user': UserEntity,
            'provider': str,
            'platform': str,
            'device_id': str,
            'token': str,
            'created_at': datetime,
            'updated_at': datetime
        }

        self.attribute_map = {
            'id': 'id',
            'workspace_id': 'workspaceId',
            'workspace': 'workspace',
            'user_id': 'userId',
            'user': 'user',
            'provider': 'provider',
            'platform': 'platform',
            'device_id': 'deviceId',
            'token': 'token',
            'created_at': 'createdAt',
            'updated_at': 'updatedAt'
        }

        self._id = id
        self._workspace_id = workspace_id
        self._workspace = workspace
        self._user_id = user_id
        self._user = user
        self._provider = provider
        self._platform = platform
        self._device_id = device_id
        self._token = token
        self._created_at = created_at
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MessageTokenEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MessageTokenEntity of this MessageTokenEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this MessageTokenEntity.


        :return: The id of this MessageTokenEntity.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MessageTokenEntity.


        :param id: The id of this MessageTokenEntity.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def workspace_id(self):
        """Gets the workspace_id of this MessageTokenEntity.


        :return: The workspace_id of this MessageTokenEntity.
        :rtype: str
        """
        return self._workspace_id

    @workspace_id.setter
    def workspace_id(self, workspace_id):
        """Sets the workspace_id of this MessageTokenEntity.


        :param workspace_id: The workspace_id of this MessageTokenEntity.
        :type workspace_id: str
        """
        if workspace_id is None:
            raise ValueError("Invalid value for `workspace_id`, must not be `None`")

        self._workspace_id = workspace_id

    @property
    def workspace(self):
        """Gets the workspace of this MessageTokenEntity.


        :return: The workspace of this MessageTokenEntity.
        :rtype: WorkspaceEntity
        """
        return self._workspace

    @workspace.setter
    def workspace(self, workspace):
        """Sets the workspace of this MessageTokenEntity.


        :param workspace: The workspace of this MessageTokenEntity.
        :type workspace: WorkspaceEntity
        """
        if workspace is None:
            raise ValueError("Invalid value for `workspace`, must not be `None`")

        self._workspace = workspace

    @property
    def user_id(self):
        """Gets the user_id of this MessageTokenEntity.


        :return: The user_id of this MessageTokenEntity.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this MessageTokenEntity.


        :param user_id: The user_id of this MessageTokenEntity.
        :type user_id: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")

        self._user_id = user_id

    @property
    def user(self):
        """Gets the user of this MessageTokenEntity.


        :return: The user of this MessageTokenEntity.
        :rtype: UserEntity
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this MessageTokenEntity.


        :param user: The user of this MessageTokenEntity.
        :type user: UserEntity
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")

        self._user = user

    @property
    def provider(self):
        """Gets the provider of this MessageTokenEntity.


        :return: The provider of this MessageTokenEntity.
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this MessageTokenEntity.


        :param provider: The provider of this MessageTokenEntity.
        :type provider: str
        """
        allowed_values = ["FIREBASE_MESSAGING"]  # noqa: E501
        if provider not in allowed_values:
            raise ValueError(
                "Invalid value for `provider` ({0}), must be one of {1}"
                .format(provider, allowed_values)
            )

        self._provider = provider

    @property
    def platform(self):
        """Gets the platform of this MessageTokenEntity.


        :return: The platform of this MessageTokenEntity.
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this MessageTokenEntity.


        :param platform: The platform of this MessageTokenEntity.
        :type platform: str
        """
        allowed_values = ["WEB", "ANDROID", "IOS"]  # noqa: E501
        if platform not in allowed_values:
            raise ValueError(
                "Invalid value for `platform` ({0}), must be one of {1}"
                .format(platform, allowed_values)
            )

        self._platform = platform

    @property
    def device_id(self):
        """Gets the device_id of this MessageTokenEntity.


        :return: The device_id of this MessageTokenEntity.
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this MessageTokenEntity.


        :param device_id: The device_id of this MessageTokenEntity.
        :type device_id: str
        """
        if device_id is None:
            raise ValueError("Invalid value for `device_id`, must not be `None`")

        self._device_id = device_id

    @property
    def token(self):
        """Gets the token of this MessageTokenEntity.


        :return: The token of this MessageTokenEntity.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this MessageTokenEntity.


        :param token: The token of this MessageTokenEntity.
        :type token: str
        """
        if token is None:
            raise ValueError("Invalid value for `token`, must not be `None`")

        self._token = token

    @property
    def created_at(self):
        """Gets the created_at of this MessageTokenEntity.


        :return: The created_at of this MessageTokenEntity.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this MessageTokenEntity.


        :param created_at: The created_at of this MessageTokenEntity.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this MessageTokenEntity.


        :return: The updated_at of this MessageTokenEntity.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this MessageTokenEntity.


        :param updated_at: The updated_at of this MessageTokenEntity.
        :type updated_at: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at
