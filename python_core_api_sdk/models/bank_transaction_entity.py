# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from python_core_api_sdk.models.base_model import Model
from python_core_api_sdk.models.bank_account_entity import BankAccountEntity
from python_core_api_sdk.models.bank_transaction_category_plain_entity import BankTransactionCategoryPlainEntity
from python_core_api_sdk.models.bank_transaction_credit_card_metadata_entity import BankTransactionCreditCardMetadataEntity
from python_core_api_sdk.models.bank_transaction_payment_data_entity import BankTransactionPaymentDataEntity
from python_core_api_sdk.models.bank_transaction_tag_entity import BankTransactionTagEntity
from python_core_api_sdk import util


class BankTransactionEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, account_id: str=None, account: BankAccountEntity=None, workspace_id: str=None, provider: str=None, provider_transaction_id: str=None, original_description: str=None, description: str=None, posted_date: datetime=None, competency_date: datetime=None, amount: float=None, type: str=None, status: str=None, legal_nature: str=None, provider_category_id: str=None, provider_category_name: str=None, category_id: str=None, category: BankTransactionCategoryPlainEntity=None, tags: List[BankTransactionTagEntity]=None, payment_data_id: str=None, payment_data: BankTransactionPaymentDataEntity=None, credit_card_metadata_id: str=None, credit_card_metadata: BankTransactionCreditCardMetadataEntity=None, best_guess_category_id: str=None, best_guess_category: BankTransactionCategoryPlainEntity=None, ignored_at: datetime=None, confirmed_at: datetime=None, created_at: datetime=None, updated_at: datetime=None):
        """BankTransactionEntity - a model defined in OpenAPI

        :param id: The id of this BankTransactionEntity.
        :param account_id: The account_id of this BankTransactionEntity.
        :param account: The account of this BankTransactionEntity.
        :param workspace_id: The workspace_id of this BankTransactionEntity.
        :param provider: The provider of this BankTransactionEntity.
        :param provider_transaction_id: The provider_transaction_id of this BankTransactionEntity.
        :param original_description: The original_description of this BankTransactionEntity.
        :param description: The description of this BankTransactionEntity.
        :param posted_date: The posted_date of this BankTransactionEntity.
        :param competency_date: The competency_date of this BankTransactionEntity.
        :param amount: The amount of this BankTransactionEntity.
        :param type: The type of this BankTransactionEntity.
        :param status: The status of this BankTransactionEntity.
        :param legal_nature: The legal_nature of this BankTransactionEntity.
        :param provider_category_id: The provider_category_id of this BankTransactionEntity.
        :param provider_category_name: The provider_category_name of this BankTransactionEntity.
        :param category_id: The category_id of this BankTransactionEntity.
        :param category: The category of this BankTransactionEntity.
        :param tags: The tags of this BankTransactionEntity.
        :param payment_data_id: The payment_data_id of this BankTransactionEntity.
        :param payment_data: The payment_data of this BankTransactionEntity.
        :param credit_card_metadata_id: The credit_card_metadata_id of this BankTransactionEntity.
        :param credit_card_metadata: The credit_card_metadata of this BankTransactionEntity.
        :param best_guess_category_id: The best_guess_category_id of this BankTransactionEntity.
        :param best_guess_category: The best_guess_category of this BankTransactionEntity.
        :param ignored_at: The ignored_at of this BankTransactionEntity.
        :param confirmed_at: The confirmed_at of this BankTransactionEntity.
        :param created_at: The created_at of this BankTransactionEntity.
        :param updated_at: The updated_at of this BankTransactionEntity.
        """
        self.openapi_types = {
            'id': str,
            'account_id': str,
            'account': BankAccountEntity,
            'workspace_id': str,
            'provider': str,
            'provider_transaction_id': str,
            'original_description': str,
            'description': str,
            'posted_date': datetime,
            'competency_date': datetime,
            'amount': float,
            'type': str,
            'status': str,
            'legal_nature': str,
            'provider_category_id': str,
            'provider_category_name': str,
            'category_id': str,
            'category': BankTransactionCategoryPlainEntity,
            'tags': List[BankTransactionTagEntity],
            'payment_data_id': str,
            'payment_data': BankTransactionPaymentDataEntity,
            'credit_card_metadata_id': str,
            'credit_card_metadata': BankTransactionCreditCardMetadataEntity,
            'best_guess_category_id': str,
            'best_guess_category': BankTransactionCategoryPlainEntity,
            'ignored_at': datetime,
            'confirmed_at': datetime,
            'created_at': datetime,
            'updated_at': datetime
        }

        self.attribute_map = {
            'id': 'id',
            'account_id': 'accountId',
            'account': 'account',
            'workspace_id': 'workspaceId',
            'provider': 'provider',
            'provider_transaction_id': 'providerTransactionId',
            'original_description': 'originalDescription',
            'description': 'description',
            'posted_date': 'postedDate',
            'competency_date': 'competencyDate',
            'amount': 'amount',
            'type': 'type',
            'status': 'status',
            'legal_nature': 'legalNature',
            'provider_category_id': 'providerCategoryId',
            'provider_category_name': 'providerCategoryName',
            'category_id': 'categoryId',
            'category': 'category',
            'tags': 'tags',
            'payment_data_id': 'paymentDataId',
            'payment_data': 'paymentData',
            'credit_card_metadata_id': 'creditCardMetadataId',
            'credit_card_metadata': 'creditCardMetadata',
            'best_guess_category_id': 'bestGuessCategoryId',
            'best_guess_category': 'bestGuessCategory',
            'ignored_at': 'ignoredAt',
            'confirmed_at': 'confirmedAt',
            'created_at': 'createdAt',
            'updated_at': 'updatedAt'
        }

        self._id = id
        self._account_id = account_id
        self._account = account
        self._workspace_id = workspace_id
        self._provider = provider
        self._provider_transaction_id = provider_transaction_id
        self._original_description = original_description
        self._description = description
        self._posted_date = posted_date
        self._competency_date = competency_date
        self._amount = amount
        self._type = type
        self._status = status
        self._legal_nature = legal_nature
        self._provider_category_id = provider_category_id
        self._provider_category_name = provider_category_name
        self._category_id = category_id
        self._category = category
        self._tags = tags
        self._payment_data_id = payment_data_id
        self._payment_data = payment_data
        self._credit_card_metadata_id = credit_card_metadata_id
        self._credit_card_metadata = credit_card_metadata
        self._best_guess_category_id = best_guess_category_id
        self._best_guess_category = best_guess_category
        self._ignored_at = ignored_at
        self._confirmed_at = confirmed_at
        self._created_at = created_at
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BankTransactionEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BankTransactionEntity of this BankTransactionEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this BankTransactionEntity.


        :return: The id of this BankTransactionEntity.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BankTransactionEntity.


        :param id: The id of this BankTransactionEntity.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def account_id(self):
        """Gets the account_id of this BankTransactionEntity.


        :return: The account_id of this BankTransactionEntity.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this BankTransactionEntity.


        :param account_id: The account_id of this BankTransactionEntity.
        :type account_id: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")

        self._account_id = account_id

    @property
    def account(self):
        """Gets the account of this BankTransactionEntity.


        :return: The account of this BankTransactionEntity.
        :rtype: BankAccountEntity
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this BankTransactionEntity.


        :param account: The account of this BankTransactionEntity.
        :type account: BankAccountEntity
        """
        if account is None:
            raise ValueError("Invalid value for `account`, must not be `None`")

        self._account = account

    @property
    def workspace_id(self):
        """Gets the workspace_id of this BankTransactionEntity.


        :return: The workspace_id of this BankTransactionEntity.
        :rtype: str
        """
        return self._workspace_id

    @workspace_id.setter
    def workspace_id(self, workspace_id):
        """Sets the workspace_id of this BankTransactionEntity.


        :param workspace_id: The workspace_id of this BankTransactionEntity.
        :type workspace_id: str
        """
        if workspace_id is None:
            raise ValueError("Invalid value for `workspace_id`, must not be `None`")

        self._workspace_id = workspace_id

    @property
    def provider(self):
        """Gets the provider of this BankTransactionEntity.


        :return: The provider of this BankTransactionEntity.
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this BankTransactionEntity.


        :param provider: The provider of this BankTransactionEntity.
        :type provider: str
        """
        allowed_values = ["PLUGGY", "SOFIA"]  # noqa: E501
        if provider not in allowed_values:
            raise ValueError(
                "Invalid value for `provider` ({0}), must be one of {1}"
                .format(provider, allowed_values)
            )

        self._provider = provider

    @property
    def provider_transaction_id(self):
        """Gets the provider_transaction_id of this BankTransactionEntity.


        :return: The provider_transaction_id of this BankTransactionEntity.
        :rtype: str
        """
        return self._provider_transaction_id

    @provider_transaction_id.setter
    def provider_transaction_id(self, provider_transaction_id):
        """Sets the provider_transaction_id of this BankTransactionEntity.


        :param provider_transaction_id: The provider_transaction_id of this BankTransactionEntity.
        :type provider_transaction_id: str
        """
        if provider_transaction_id is None:
            raise ValueError("Invalid value for `provider_transaction_id`, must not be `None`")

        self._provider_transaction_id = provider_transaction_id

    @property
    def original_description(self):
        """Gets the original_description of this BankTransactionEntity.


        :return: The original_description of this BankTransactionEntity.
        :rtype: str
        """
        return self._original_description

    @original_description.setter
    def original_description(self, original_description):
        """Sets the original_description of this BankTransactionEntity.


        :param original_description: The original_description of this BankTransactionEntity.
        :type original_description: str
        """
        if original_description is None:
            raise ValueError("Invalid value for `original_description`, must not be `None`")

        self._original_description = original_description

    @property
    def description(self):
        """Gets the description of this BankTransactionEntity.


        :return: The description of this BankTransactionEntity.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this BankTransactionEntity.


        :param description: The description of this BankTransactionEntity.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def posted_date(self):
        """Gets the posted_date of this BankTransactionEntity.


        :return: The posted_date of this BankTransactionEntity.
        :rtype: datetime
        """
        return self._posted_date

    @posted_date.setter
    def posted_date(self, posted_date):
        """Sets the posted_date of this BankTransactionEntity.


        :param posted_date: The posted_date of this BankTransactionEntity.
        :type posted_date: datetime
        """
        if posted_date is None:
            raise ValueError("Invalid value for `posted_date`, must not be `None`")

        self._posted_date = posted_date

    @property
    def competency_date(self):
        """Gets the competency_date of this BankTransactionEntity.


        :return: The competency_date of this BankTransactionEntity.
        :rtype: datetime
        """
        return self._competency_date

    @competency_date.setter
    def competency_date(self, competency_date):
        """Sets the competency_date of this BankTransactionEntity.


        :param competency_date: The competency_date of this BankTransactionEntity.
        :type competency_date: datetime
        """
        if competency_date is None:
            raise ValueError("Invalid value for `competency_date`, must not be `None`")

        self._competency_date = competency_date

    @property
    def amount(self):
        """Gets the amount of this BankTransactionEntity.


        :return: The amount of this BankTransactionEntity.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this BankTransactionEntity.


        :param amount: The amount of this BankTransactionEntity.
        :type amount: float
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def type(self):
        """Gets the type of this BankTransactionEntity.


        :return: The type of this BankTransactionEntity.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BankTransactionEntity.


        :param type: The type of this BankTransactionEntity.
        :type type: str
        """
        allowed_values = ["DEBIT", "CREDIT"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def status(self):
        """Gets the status of this BankTransactionEntity.


        :return: The status of this BankTransactionEntity.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this BankTransactionEntity.


        :param status: The status of this BankTransactionEntity.
        :type status: str
        """
        allowed_values = ["PENDING", "POSTED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def legal_nature(self):
        """Gets the legal_nature of this BankTransactionEntity.


        :return: The legal_nature of this BankTransactionEntity.
        :rtype: str
        """
        return self._legal_nature

    @legal_nature.setter
    def legal_nature(self, legal_nature):
        """Sets the legal_nature of this BankTransactionEntity.


        :param legal_nature: The legal_nature of this BankTransactionEntity.
        :type legal_nature: str
        """
        allowed_values = ["PERSONAL", "BUSINESS"]  # noqa: E501
        if legal_nature not in allowed_values:
            raise ValueError(
                "Invalid value for `legal_nature` ({0}), must be one of {1}"
                .format(legal_nature, allowed_values)
            )

        self._legal_nature = legal_nature

    @property
    def provider_category_id(self):
        """Gets the provider_category_id of this BankTransactionEntity.


        :return: The provider_category_id of this BankTransactionEntity.
        :rtype: str
        """
        return self._provider_category_id

    @provider_category_id.setter
    def provider_category_id(self, provider_category_id):
        """Sets the provider_category_id of this BankTransactionEntity.


        :param provider_category_id: The provider_category_id of this BankTransactionEntity.
        :type provider_category_id: str
        """

        self._provider_category_id = provider_category_id

    @property
    def provider_category_name(self):
        """Gets the provider_category_name of this BankTransactionEntity.


        :return: The provider_category_name of this BankTransactionEntity.
        :rtype: str
        """
        return self._provider_category_name

    @provider_category_name.setter
    def provider_category_name(self, provider_category_name):
        """Sets the provider_category_name of this BankTransactionEntity.


        :param provider_category_name: The provider_category_name of this BankTransactionEntity.
        :type provider_category_name: str
        """

        self._provider_category_name = provider_category_name

    @property
    def category_id(self):
        """Gets the category_id of this BankTransactionEntity.


        :return: The category_id of this BankTransactionEntity.
        :rtype: str
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this BankTransactionEntity.


        :param category_id: The category_id of this BankTransactionEntity.
        :type category_id: str
        """

        self._category_id = category_id

    @property
    def category(self):
        """Gets the category of this BankTransactionEntity.


        :return: The category of this BankTransactionEntity.
        :rtype: BankTransactionCategoryPlainEntity
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this BankTransactionEntity.


        :param category: The category of this BankTransactionEntity.
        :type category: BankTransactionCategoryPlainEntity
        """

        self._category = category

    @property
    def tags(self):
        """Gets the tags of this BankTransactionEntity.


        :return: The tags of this BankTransactionEntity.
        :rtype: List[BankTransactionTagEntity]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this BankTransactionEntity.


        :param tags: The tags of this BankTransactionEntity.
        :type tags: List[BankTransactionTagEntity]
        """
        if tags is None:
            raise ValueError("Invalid value for `tags`, must not be `None`")

        self._tags = tags

    @property
    def payment_data_id(self):
        """Gets the payment_data_id of this BankTransactionEntity.


        :return: The payment_data_id of this BankTransactionEntity.
        :rtype: str
        """
        return self._payment_data_id

    @payment_data_id.setter
    def payment_data_id(self, payment_data_id):
        """Sets the payment_data_id of this BankTransactionEntity.


        :param payment_data_id: The payment_data_id of this BankTransactionEntity.
        :type payment_data_id: str
        """

        self._payment_data_id = payment_data_id

    @property
    def payment_data(self):
        """Gets the payment_data of this BankTransactionEntity.


        :return: The payment_data of this BankTransactionEntity.
        :rtype: BankTransactionPaymentDataEntity
        """
        return self._payment_data

    @payment_data.setter
    def payment_data(self, payment_data):
        """Sets the payment_data of this BankTransactionEntity.


        :param payment_data: The payment_data of this BankTransactionEntity.
        :type payment_data: BankTransactionPaymentDataEntity
        """

        self._payment_data = payment_data

    @property
    def credit_card_metadata_id(self):
        """Gets the credit_card_metadata_id of this BankTransactionEntity.


        :return: The credit_card_metadata_id of this BankTransactionEntity.
        :rtype: str
        """
        return self._credit_card_metadata_id

    @credit_card_metadata_id.setter
    def credit_card_metadata_id(self, credit_card_metadata_id):
        """Sets the credit_card_metadata_id of this BankTransactionEntity.


        :param credit_card_metadata_id: The credit_card_metadata_id of this BankTransactionEntity.
        :type credit_card_metadata_id: str
        """

        self._credit_card_metadata_id = credit_card_metadata_id

    @property
    def credit_card_metadata(self):
        """Gets the credit_card_metadata of this BankTransactionEntity.


        :return: The credit_card_metadata of this BankTransactionEntity.
        :rtype: BankTransactionCreditCardMetadataEntity
        """
        return self._credit_card_metadata

    @credit_card_metadata.setter
    def credit_card_metadata(self, credit_card_metadata):
        """Sets the credit_card_metadata of this BankTransactionEntity.


        :param credit_card_metadata: The credit_card_metadata of this BankTransactionEntity.
        :type credit_card_metadata: BankTransactionCreditCardMetadataEntity
        """

        self._credit_card_metadata = credit_card_metadata

    @property
    def best_guess_category_id(self):
        """Gets the best_guess_category_id of this BankTransactionEntity.


        :return: The best_guess_category_id of this BankTransactionEntity.
        :rtype: str
        """
        return self._best_guess_category_id

    @best_guess_category_id.setter
    def best_guess_category_id(self, best_guess_category_id):
        """Sets the best_guess_category_id of this BankTransactionEntity.


        :param best_guess_category_id: The best_guess_category_id of this BankTransactionEntity.
        :type best_guess_category_id: str
        """

        self._best_guess_category_id = best_guess_category_id

    @property
    def best_guess_category(self):
        """Gets the best_guess_category of this BankTransactionEntity.


        :return: The best_guess_category of this BankTransactionEntity.
        :rtype: BankTransactionCategoryPlainEntity
        """
        return self._best_guess_category

    @best_guess_category.setter
    def best_guess_category(self, best_guess_category):
        """Sets the best_guess_category of this BankTransactionEntity.


        :param best_guess_category: The best_guess_category of this BankTransactionEntity.
        :type best_guess_category: BankTransactionCategoryPlainEntity
        """

        self._best_guess_category = best_guess_category

    @property
    def ignored_at(self):
        """Gets the ignored_at of this BankTransactionEntity.


        :return: The ignored_at of this BankTransactionEntity.
        :rtype: datetime
        """
        return self._ignored_at

    @ignored_at.setter
    def ignored_at(self, ignored_at):
        """Sets the ignored_at of this BankTransactionEntity.


        :param ignored_at: The ignored_at of this BankTransactionEntity.
        :type ignored_at: datetime
        """

        self._ignored_at = ignored_at

    @property
    def confirmed_at(self):
        """Gets the confirmed_at of this BankTransactionEntity.


        :return: The confirmed_at of this BankTransactionEntity.
        :rtype: datetime
        """
        return self._confirmed_at

    @confirmed_at.setter
    def confirmed_at(self, confirmed_at):
        """Sets the confirmed_at of this BankTransactionEntity.


        :param confirmed_at: The confirmed_at of this BankTransactionEntity.
        :type confirmed_at: datetime
        """

        self._confirmed_at = confirmed_at

    @property
    def created_at(self):
        """Gets the created_at of this BankTransactionEntity.


        :return: The created_at of this BankTransactionEntity.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this BankTransactionEntity.


        :param created_at: The created_at of this BankTransactionEntity.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this BankTransactionEntity.


        :return: The updated_at of this BankTransactionEntity.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this BankTransactionEntity.


        :param updated_at: The updated_at of this BankTransactionEntity.
        :type updated_at: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at
