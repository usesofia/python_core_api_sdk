# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from python_core_api_sdk.models.base_model import Model
from python_core_api_sdk.models.bank_account_entity import BankAccountEntity
from python_core_api_sdk.models.bank_accounts_balance_report_item_entity import BankAccountsBalanceReportItemEntity
from python_core_api_sdk import util


class BankAccountsBalanceReportEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, items: List[BankAccountsBalanceReportItemEntity]=None, bank_accounts: List[BankAccountEntity]=None):
        """BankAccountsBalanceReportEntity - a model defined in OpenAPI

        :param items: The items of this BankAccountsBalanceReportEntity.
        :param bank_accounts: The bank_accounts of this BankAccountsBalanceReportEntity.
        """
        self.openapi_types = {
            'items': List[BankAccountsBalanceReportItemEntity],
            'bank_accounts': List[BankAccountEntity]
        }

        self.attribute_map = {
            'items': 'items',
            'bank_accounts': 'bankAccounts'
        }

        self._items = items
        self._bank_accounts = bank_accounts

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BankAccountsBalanceReportEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BankAccountsBalanceReportEntity of this BankAccountsBalanceReportEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def items(self):
        """Gets the items of this BankAccountsBalanceReportEntity.


        :return: The items of this BankAccountsBalanceReportEntity.
        :rtype: List[BankAccountsBalanceReportItemEntity]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this BankAccountsBalanceReportEntity.


        :param items: The items of this BankAccountsBalanceReportEntity.
        :type items: List[BankAccountsBalanceReportItemEntity]
        """
        if items is None:
            raise ValueError("Invalid value for `items`, must not be `None`")

        self._items = items

    @property
    def bank_accounts(self):
        """Gets the bank_accounts of this BankAccountsBalanceReportEntity.


        :return: The bank_accounts of this BankAccountsBalanceReportEntity.
        :rtype: List[BankAccountEntity]
        """
        return self._bank_accounts

    @bank_accounts.setter
    def bank_accounts(self, bank_accounts):
        """Sets the bank_accounts of this BankAccountsBalanceReportEntity.


        :param bank_accounts: The bank_accounts of this BankAccountsBalanceReportEntity.
        :type bank_accounts: List[BankAccountEntity]
        """
        if bank_accounts is None:
            raise ValueError("Invalid value for `bank_accounts`, must not be `None`")

        self._bank_accounts = bank_accounts
