# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from python_core_api_sdk.models.base_model import Model
from python_core_api_sdk.models.category_guess_dto import CategoryGuessDto
from python_core_api_sdk.models.credit_card_metadata_dto import CreditCardMetadataDto
from python_core_api_sdk.models.payment_data_dto import PaymentDataDto
from python_core_api_sdk import util


class CreateOrUpdateBankTransactionsInBulkItemDto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, provider: str=None, workspace_id: str=None, provider_transaction_id: str=None, description: str=None, posted_date: datetime=None, competency_date: datetime=None, amount: float=None, type: str=None, status: str=None, legal_nature: str=None, provider_category_id: str=None, provider_category_name: str=None, category_id: str=None, payment_data: PaymentDataDto=None, credit_card_metadata: CreditCardMetadataDto=None, category_guesses: List[CategoryGuessDto]=None, best_guess_category_id: str=None):
        """CreateOrUpdateBankTransactionsInBulkItemDto - a model defined in OpenAPI

        :param account_id: The account_id of this CreateOrUpdateBankTransactionsInBulkItemDto.
        :param provider: The provider of this CreateOrUpdateBankTransactionsInBulkItemDto.
        :param workspace_id: The workspace_id of this CreateOrUpdateBankTransactionsInBulkItemDto.
        :param provider_transaction_id: The provider_transaction_id of this CreateOrUpdateBankTransactionsInBulkItemDto.
        :param description: The description of this CreateOrUpdateBankTransactionsInBulkItemDto.
        :param posted_date: The posted_date of this CreateOrUpdateBankTransactionsInBulkItemDto.
        :param competency_date: The competency_date of this CreateOrUpdateBankTransactionsInBulkItemDto.
        :param amount: The amount of this CreateOrUpdateBankTransactionsInBulkItemDto.
        :param type: The type of this CreateOrUpdateBankTransactionsInBulkItemDto.
        :param status: The status of this CreateOrUpdateBankTransactionsInBulkItemDto.
        :param legal_nature: The legal_nature of this CreateOrUpdateBankTransactionsInBulkItemDto.
        :param provider_category_id: The provider_category_id of this CreateOrUpdateBankTransactionsInBulkItemDto.
        :param provider_category_name: The provider_category_name of this CreateOrUpdateBankTransactionsInBulkItemDto.
        :param category_id: The category_id of this CreateOrUpdateBankTransactionsInBulkItemDto.
        :param payment_data: The payment_data of this CreateOrUpdateBankTransactionsInBulkItemDto.
        :param credit_card_metadata: The credit_card_metadata of this CreateOrUpdateBankTransactionsInBulkItemDto.
        :param category_guesses: The category_guesses of this CreateOrUpdateBankTransactionsInBulkItemDto.
        :param best_guess_category_id: The best_guess_category_id of this CreateOrUpdateBankTransactionsInBulkItemDto.
        """
        self.openapi_types = {
            'account_id': str,
            'provider': str,
            'workspace_id': str,
            'provider_transaction_id': str,
            'description': str,
            'posted_date': datetime,
            'competency_date': datetime,
            'amount': float,
            'type': str,
            'status': str,
            'legal_nature': str,
            'provider_category_id': str,
            'provider_category_name': str,
            'category_id': str,
            'payment_data': PaymentDataDto,
            'credit_card_metadata': CreditCardMetadataDto,
            'category_guesses': List[CategoryGuessDto],
            'best_guess_category_id': str
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'provider': 'provider',
            'workspace_id': 'workspaceId',
            'provider_transaction_id': 'providerTransactionId',
            'description': 'description',
            'posted_date': 'postedDate',
            'competency_date': 'competencyDate',
            'amount': 'amount',
            'type': 'type',
            'status': 'status',
            'legal_nature': 'legalNature',
            'provider_category_id': 'providerCategoryId',
            'provider_category_name': 'providerCategoryName',
            'category_id': 'categoryId',
            'payment_data': 'paymentData',
            'credit_card_metadata': 'creditCardMetadata',
            'category_guesses': 'categoryGuesses',
            'best_guess_category_id': 'bestGuessCategoryId'
        }

        self._account_id = account_id
        self._provider = provider
        self._workspace_id = workspace_id
        self._provider_transaction_id = provider_transaction_id
        self._description = description
        self._posted_date = posted_date
        self._competency_date = competency_date
        self._amount = amount
        self._type = type
        self._status = status
        self._legal_nature = legal_nature
        self._provider_category_id = provider_category_id
        self._provider_category_name = provider_category_name
        self._category_id = category_id
        self._payment_data = payment_data
        self._credit_card_metadata = credit_card_metadata
        self._category_guesses = category_guesses
        self._best_guess_category_id = best_guess_category_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateOrUpdateBankTransactionsInBulkItemDto':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateOrUpdateBankTransactionsInBulkItemDto of this CreateOrUpdateBankTransactionsInBulkItemDto.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this CreateOrUpdateBankTransactionsInBulkItemDto.


        :return: The account_id of this CreateOrUpdateBankTransactionsInBulkItemDto.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this CreateOrUpdateBankTransactionsInBulkItemDto.


        :param account_id: The account_id of this CreateOrUpdateBankTransactionsInBulkItemDto.
        :type account_id: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")

        self._account_id = account_id

    @property
    def provider(self):
        """Gets the provider of this CreateOrUpdateBankTransactionsInBulkItemDto.


        :return: The provider of this CreateOrUpdateBankTransactionsInBulkItemDto.
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this CreateOrUpdateBankTransactionsInBulkItemDto.


        :param provider: The provider of this CreateOrUpdateBankTransactionsInBulkItemDto.
        :type provider: str
        """
        if provider is None:
            raise ValueError("Invalid value for `provider`, must not be `None`")

        self._provider = provider

    @property
    def workspace_id(self):
        """Gets the workspace_id of this CreateOrUpdateBankTransactionsInBulkItemDto.


        :return: The workspace_id of this CreateOrUpdateBankTransactionsInBulkItemDto.
        :rtype: str
        """
        return self._workspace_id

    @workspace_id.setter
    def workspace_id(self, workspace_id):
        """Sets the workspace_id of this CreateOrUpdateBankTransactionsInBulkItemDto.


        :param workspace_id: The workspace_id of this CreateOrUpdateBankTransactionsInBulkItemDto.
        :type workspace_id: str
        """
        if workspace_id is None:
            raise ValueError("Invalid value for `workspace_id`, must not be `None`")

        self._workspace_id = workspace_id

    @property
    def provider_transaction_id(self):
        """Gets the provider_transaction_id of this CreateOrUpdateBankTransactionsInBulkItemDto.


        :return: The provider_transaction_id of this CreateOrUpdateBankTransactionsInBulkItemDto.
        :rtype: str
        """
        return self._provider_transaction_id

    @provider_transaction_id.setter
    def provider_transaction_id(self, provider_transaction_id):
        """Sets the provider_transaction_id of this CreateOrUpdateBankTransactionsInBulkItemDto.


        :param provider_transaction_id: The provider_transaction_id of this CreateOrUpdateBankTransactionsInBulkItemDto.
        :type provider_transaction_id: str
        """
        if provider_transaction_id is None:
            raise ValueError("Invalid value for `provider_transaction_id`, must not be `None`")

        self._provider_transaction_id = provider_transaction_id

    @property
    def description(self):
        """Gets the description of this CreateOrUpdateBankTransactionsInBulkItemDto.


        :return: The description of this CreateOrUpdateBankTransactionsInBulkItemDto.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateOrUpdateBankTransactionsInBulkItemDto.


        :param description: The description of this CreateOrUpdateBankTransactionsInBulkItemDto.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def posted_date(self):
        """Gets the posted_date of this CreateOrUpdateBankTransactionsInBulkItemDto.


        :return: The posted_date of this CreateOrUpdateBankTransactionsInBulkItemDto.
        :rtype: datetime
        """
        return self._posted_date

    @posted_date.setter
    def posted_date(self, posted_date):
        """Sets the posted_date of this CreateOrUpdateBankTransactionsInBulkItemDto.


        :param posted_date: The posted_date of this CreateOrUpdateBankTransactionsInBulkItemDto.
        :type posted_date: datetime
        """
        if posted_date is None:
            raise ValueError("Invalid value for `posted_date`, must not be `None`")

        self._posted_date = posted_date

    @property
    def competency_date(self):
        """Gets the competency_date of this CreateOrUpdateBankTransactionsInBulkItemDto.


        :return: The competency_date of this CreateOrUpdateBankTransactionsInBulkItemDto.
        :rtype: datetime
        """
        return self._competency_date

    @competency_date.setter
    def competency_date(self, competency_date):
        """Sets the competency_date of this CreateOrUpdateBankTransactionsInBulkItemDto.


        :param competency_date: The competency_date of this CreateOrUpdateBankTransactionsInBulkItemDto.
        :type competency_date: datetime
        """
        if competency_date is None:
            raise ValueError("Invalid value for `competency_date`, must not be `None`")

        self._competency_date = competency_date

    @property
    def amount(self):
        """Gets the amount of this CreateOrUpdateBankTransactionsInBulkItemDto.


        :return: The amount of this CreateOrUpdateBankTransactionsInBulkItemDto.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this CreateOrUpdateBankTransactionsInBulkItemDto.


        :param amount: The amount of this CreateOrUpdateBankTransactionsInBulkItemDto.
        :type amount: float
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def type(self):
        """Gets the type of this CreateOrUpdateBankTransactionsInBulkItemDto.


        :return: The type of this CreateOrUpdateBankTransactionsInBulkItemDto.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreateOrUpdateBankTransactionsInBulkItemDto.


        :param type: The type of this CreateOrUpdateBankTransactionsInBulkItemDto.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def status(self):
        """Gets the status of this CreateOrUpdateBankTransactionsInBulkItemDto.


        :return: The status of this CreateOrUpdateBankTransactionsInBulkItemDto.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CreateOrUpdateBankTransactionsInBulkItemDto.


        :param status: The status of this CreateOrUpdateBankTransactionsInBulkItemDto.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def legal_nature(self):
        """Gets the legal_nature of this CreateOrUpdateBankTransactionsInBulkItemDto.


        :return: The legal_nature of this CreateOrUpdateBankTransactionsInBulkItemDto.
        :rtype: str
        """
        return self._legal_nature

    @legal_nature.setter
    def legal_nature(self, legal_nature):
        """Sets the legal_nature of this CreateOrUpdateBankTransactionsInBulkItemDto.


        :param legal_nature: The legal_nature of this CreateOrUpdateBankTransactionsInBulkItemDto.
        :type legal_nature: str
        """
        if legal_nature is None:
            raise ValueError("Invalid value for `legal_nature`, must not be `None`")

        self._legal_nature = legal_nature

    @property
    def provider_category_id(self):
        """Gets the provider_category_id of this CreateOrUpdateBankTransactionsInBulkItemDto.


        :return: The provider_category_id of this CreateOrUpdateBankTransactionsInBulkItemDto.
        :rtype: str
        """
        return self._provider_category_id

    @provider_category_id.setter
    def provider_category_id(self, provider_category_id):
        """Sets the provider_category_id of this CreateOrUpdateBankTransactionsInBulkItemDto.


        :param provider_category_id: The provider_category_id of this CreateOrUpdateBankTransactionsInBulkItemDto.
        :type provider_category_id: str
        """

        self._provider_category_id = provider_category_id

    @property
    def provider_category_name(self):
        """Gets the provider_category_name of this CreateOrUpdateBankTransactionsInBulkItemDto.


        :return: The provider_category_name of this CreateOrUpdateBankTransactionsInBulkItemDto.
        :rtype: str
        """
        return self._provider_category_name

    @provider_category_name.setter
    def provider_category_name(self, provider_category_name):
        """Sets the provider_category_name of this CreateOrUpdateBankTransactionsInBulkItemDto.


        :param provider_category_name: The provider_category_name of this CreateOrUpdateBankTransactionsInBulkItemDto.
        :type provider_category_name: str
        """

        self._provider_category_name = provider_category_name

    @property
    def category_id(self):
        """Gets the category_id of this CreateOrUpdateBankTransactionsInBulkItemDto.


        :return: The category_id of this CreateOrUpdateBankTransactionsInBulkItemDto.
        :rtype: str
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this CreateOrUpdateBankTransactionsInBulkItemDto.


        :param category_id: The category_id of this CreateOrUpdateBankTransactionsInBulkItemDto.
        :type category_id: str
        """
        if category_id is None:
            raise ValueError("Invalid value for `category_id`, must not be `None`")

        self._category_id = category_id

    @property
    def payment_data(self):
        """Gets the payment_data of this CreateOrUpdateBankTransactionsInBulkItemDto.


        :return: The payment_data of this CreateOrUpdateBankTransactionsInBulkItemDto.
        :rtype: PaymentDataDto
        """
        return self._payment_data

    @payment_data.setter
    def payment_data(self, payment_data):
        """Sets the payment_data of this CreateOrUpdateBankTransactionsInBulkItemDto.


        :param payment_data: The payment_data of this CreateOrUpdateBankTransactionsInBulkItemDto.
        :type payment_data: PaymentDataDto
        """
        if payment_data is None:
            raise ValueError("Invalid value for `payment_data`, must not be `None`")

        self._payment_data = payment_data

    @property
    def credit_card_metadata(self):
        """Gets the credit_card_metadata of this CreateOrUpdateBankTransactionsInBulkItemDto.


        :return: The credit_card_metadata of this CreateOrUpdateBankTransactionsInBulkItemDto.
        :rtype: CreditCardMetadataDto
        """
        return self._credit_card_metadata

    @credit_card_metadata.setter
    def credit_card_metadata(self, credit_card_metadata):
        """Sets the credit_card_metadata of this CreateOrUpdateBankTransactionsInBulkItemDto.


        :param credit_card_metadata: The credit_card_metadata of this CreateOrUpdateBankTransactionsInBulkItemDto.
        :type credit_card_metadata: CreditCardMetadataDto
        """
        if credit_card_metadata is None:
            raise ValueError("Invalid value for `credit_card_metadata`, must not be `None`")

        self._credit_card_metadata = credit_card_metadata

    @property
    def category_guesses(self):
        """Gets the category_guesses of this CreateOrUpdateBankTransactionsInBulkItemDto.


        :return: The category_guesses of this CreateOrUpdateBankTransactionsInBulkItemDto.
        :rtype: List[CategoryGuessDto]
        """
        return self._category_guesses

    @category_guesses.setter
    def category_guesses(self, category_guesses):
        """Sets the category_guesses of this CreateOrUpdateBankTransactionsInBulkItemDto.


        :param category_guesses: The category_guesses of this CreateOrUpdateBankTransactionsInBulkItemDto.
        :type category_guesses: List[CategoryGuessDto]
        """
        if category_guesses is None:
            raise ValueError("Invalid value for `category_guesses`, must not be `None`")

        self._category_guesses = category_guesses

    @property
    def best_guess_category_id(self):
        """Gets the best_guess_category_id of this CreateOrUpdateBankTransactionsInBulkItemDto.


        :return: The best_guess_category_id of this CreateOrUpdateBankTransactionsInBulkItemDto.
        :rtype: str
        """
        return self._best_guess_category_id

    @best_guess_category_id.setter
    def best_guess_category_id(self, best_guess_category_id):
        """Sets the best_guess_category_id of this CreateOrUpdateBankTransactionsInBulkItemDto.


        :param best_guess_category_id: The best_guess_category_id of this CreateOrUpdateBankTransactionsInBulkItemDto.
        :type best_guess_category_id: str
        """
        if best_guess_category_id is None:
            raise ValueError("Invalid value for `best_guess_category_id`, must not be `None`")

        self._best_guess_category_id = best_guess_category_id
