# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from python_core_api_sdk.models.base_model import Model
from python_core_api_sdk.models.bank_transaction_entity import BankTransactionEntity
from python_core_api_sdk import util


class BankTransactionsPageEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, page_index: float=None, page_size: float=None, total_items: float=None, total_pages: float=None, items: List[BankTransactionEntity]=None):
        """BankTransactionsPageEntity - a model defined in OpenAPI

        :param page_index: The page_index of this BankTransactionsPageEntity.
        :param page_size: The page_size of this BankTransactionsPageEntity.
        :param total_items: The total_items of this BankTransactionsPageEntity.
        :param total_pages: The total_pages of this BankTransactionsPageEntity.
        :param items: The items of this BankTransactionsPageEntity.
        """
        self.openapi_types = {
            'page_index': float,
            'page_size': float,
            'total_items': float,
            'total_pages': float,
            'items': List[BankTransactionEntity]
        }

        self.attribute_map = {
            'page_index': 'pageIndex',
            'page_size': 'pageSize',
            'total_items': 'totalItems',
            'total_pages': 'totalPages',
            'items': 'items'
        }

        self._page_index = page_index
        self._page_size = page_size
        self._total_items = total_items
        self._total_pages = total_pages
        self._items = items

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BankTransactionsPageEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BankTransactionsPageEntity of this BankTransactionsPageEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def page_index(self):
        """Gets the page_index of this BankTransactionsPageEntity.


        :return: The page_index of this BankTransactionsPageEntity.
        :rtype: float
        """
        return self._page_index

    @page_index.setter
    def page_index(self, page_index):
        """Sets the page_index of this BankTransactionsPageEntity.


        :param page_index: The page_index of this BankTransactionsPageEntity.
        :type page_index: float
        """
        if page_index is None:
            raise ValueError("Invalid value for `page_index`, must not be `None`")

        self._page_index = page_index

    @property
    def page_size(self):
        """Gets the page_size of this BankTransactionsPageEntity.


        :return: The page_size of this BankTransactionsPageEntity.
        :rtype: float
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this BankTransactionsPageEntity.


        :param page_size: The page_size of this BankTransactionsPageEntity.
        :type page_size: float
        """
        if page_size is None:
            raise ValueError("Invalid value for `page_size`, must not be `None`")

        self._page_size = page_size

    @property
    def total_items(self):
        """Gets the total_items of this BankTransactionsPageEntity.


        :return: The total_items of this BankTransactionsPageEntity.
        :rtype: float
        """
        return self._total_items

    @total_items.setter
    def total_items(self, total_items):
        """Sets the total_items of this BankTransactionsPageEntity.


        :param total_items: The total_items of this BankTransactionsPageEntity.
        :type total_items: float
        """
        if total_items is None:
            raise ValueError("Invalid value for `total_items`, must not be `None`")

        self._total_items = total_items

    @property
    def total_pages(self):
        """Gets the total_pages of this BankTransactionsPageEntity.


        :return: The total_pages of this BankTransactionsPageEntity.
        :rtype: float
        """
        return self._total_pages

    @total_pages.setter
    def total_pages(self, total_pages):
        """Sets the total_pages of this BankTransactionsPageEntity.


        :param total_pages: The total_pages of this BankTransactionsPageEntity.
        :type total_pages: float
        """
        if total_pages is None:
            raise ValueError("Invalid value for `total_pages`, must not be `None`")

        self._total_pages = total_pages

    @property
    def items(self):
        """Gets the items of this BankTransactionsPageEntity.


        :return: The items of this BankTransactionsPageEntity.
        :rtype: List[BankTransactionEntity]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this BankTransactionsPageEntity.


        :param items: The items of this BankTransactionsPageEntity.
        :type items: List[BankTransactionEntity]
        """
        if items is None:
            raise ValueError("Invalid value for `items`, must not be `None`")

        self._items = items
