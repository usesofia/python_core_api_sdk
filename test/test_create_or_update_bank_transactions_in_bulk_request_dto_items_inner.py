# coding: utf-8

"""
    Sofia Api

    Api principal do sistema Sofia.

    The version of the OpenAPI document: 1.0.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from python_core_api_sdk.models.create_or_update_bank_transactions_in_bulk_request_dto_items_inner import CreateOrUpdateBankTransactionsInBulkRequestDtoItemsInner

class TestCreateOrUpdateBankTransactionsInBulkRequestDtoItemsInner(unittest.TestCase):
    """CreateOrUpdateBankTransactionsInBulkRequestDtoItemsInner unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CreateOrUpdateBankTransactionsInBulkRequestDtoItemsInner:
        """Test CreateOrUpdateBankTransactionsInBulkRequestDtoItemsInner
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CreateOrUpdateBankTransactionsInBulkRequestDtoItemsInner`
        """
        model = CreateOrUpdateBankTransactionsInBulkRequestDtoItemsInner()
        if include_optional:
            return CreateOrUpdateBankTransactionsInBulkRequestDtoItemsInner(
                account_id = '',
                provider = 'PLUGGY',
                workspace_id = '',
                provider_transaction_id = '',
                description = '',
                posted_date = None,
                competency_date = None,
                amount = 1.337,
                direction_nature = 'CREDIT',
                status = 'PENDING',
                legal_nature = 'PERSONAL',
                provider_category_id = '',
                provider_category_name = '',
                category_id = '',
                payment_data = python_core_api_sdk.models.create_or_update_bank_transactions_in_bulk_request_dto_items_inner_payment_data.CreateOrUpdateBankTransactionsInBulkRequestDto_items_inner_paymentData(
                    payer_name = '', 
                    payer_branch_number = '', 
                    payer_account_number = '', 
                    payer_routing_number = '', 
                    payer_routing_number_ispb = '', 
                    payer_document_number_type = '', 
                    payer_document_number_value = '', 
                    reason = '', 
                    receiver_name = '', 
                    receiver_branch_number = '', 
                    receiver_account_number = '', 
                    receiver_routing_number = '', 
                    receiver_routing_number_ispb = '', 
                    receiver_document_number_type = '', 
                    receiver_document_number_value = '', 
                    payment_method = '', 
                    reference_number = '', 
                    receiver_reference_id = '', ),
                credit_card_metadata = python_core_api_sdk.models.create_or_update_bank_transactions_in_bulk_request_dto_items_inner_credit_card_metadata.CreateOrUpdateBankTransactionsInBulkRequestDto_items_inner_creditCardMetadata(
                    installment_number = 1.337, 
                    total_installments = 1.337, 
                    total_amount = 1.337, 
                    payee_mcc = 1.337, 
                    card_number = '', 
                    bill_id = '', ),
                category_guesses = [
                    python_core_api_sdk.models.create_or_update_bank_transactions_in_bulk_request_dto_items_inner_category_guesses_inner.CreateOrUpdateBankTransactionsInBulkRequestDto_items_inner_categoryGuesses_inner(
                        category_id = '', 
                        confidence_score = 0, 
                        guesser_model_id = '', )
                    ],
                legal_nature_guesses = [
                    python_core_api_sdk.models.create_or_update_bank_transactions_in_bulk_request_dto_items_inner_legal_nature_guesses_inner.CreateOrUpdateBankTransactionsInBulkRequestDto_items_inner_legalNatureGuesses_inner(
                        legal_nature = 'PERSONAL', 
                        confidence_score = 0, 
                        guesser_model_id = '', )
                    ]
            )
        else:
            return CreateOrUpdateBankTransactionsInBulkRequestDtoItemsInner(
                account_id = '',
                provider = 'PLUGGY',
                workspace_id = '',
                provider_transaction_id = '',
                description = '',
                posted_date = None,
                competency_date = None,
                amount = 1.337,
                direction_nature = 'CREDIT',
                status = 'PENDING',
                legal_nature = 'PERSONAL',
        )
        """

    def testCreateOrUpdateBankTransactionsInBulkRequestDtoItemsInner(self):
        """Test CreateOrUpdateBankTransactionsInBulkRequestDtoItemsInner"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
