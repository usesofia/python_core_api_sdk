# coding: utf-8

"""
    Sofia Api

    Api principal do sistema Sofia.

    The version of the OpenAPI document: 1.0.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from python_core_api_sdk.models.bank_transactions_page_entity_items_inner import BankTransactionsPageEntityItemsInner

class TestBankTransactionsPageEntityItemsInner(unittest.TestCase):
    """BankTransactionsPageEntityItemsInner unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> BankTransactionsPageEntityItemsInner:
        """Test BankTransactionsPageEntityItemsInner
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `BankTransactionsPageEntityItemsInner`
        """
        model = BankTransactionsPageEntityItemsInner()
        if include_optional:
            return BankTransactionsPageEntityItemsInner(
                id = '',
                account_id = '',
                account = python_core_api_sdk.models.bank_connection_entity_accounts_inner.BankConnectionEntity_accounts_inner(
                    id = '', 
                    bank_connection_id = '', 
                    provider = 'PLUGGY', 
                    provider_account_id = '', 
                    type = 'CHECKING', 
                    enabled = True, 
                    number = '', 
                    balance = 56, 
                    currency_code = '', 
                    name = '', 
                    created_at = null, 
                    updated_at = null, ),
                workspace_id = '',
                provider = 'PLUGGY',
                provider_transaction_id = '',
                original_description = '',
                description = '',
                posted_date = None,
                competency_date = None,
                amount = 56,
                direction_nature = 'CREDIT',
                status = 'PENDING',
                legal_nature = 'PERSONAL',
                provider_category_id = '',
                provider_category_name = '',
                category_id = '',
                category = python_core_api_sdk.models.bank_transaction_entity_category.BankTransactionEntity_category(
                    id = '', 
                    name = '', 
                    direction_nature = 'CREDIT', 
                    parent_id = '', ),
                tags = [
                    python_core_api_sdk.models.bank_transaction_entity_tags_inner.BankTransactionEntity_tags_inner(
                        id = '', 
                        name = '0', 
                        created_at = null, 
                        updated_at = null, )
                    ],
                payment_data_id = '',
                payment_data = python_core_api_sdk.models.bank_transaction_entity_payment_data.BankTransactionEntity_paymentData(
                    id = '', 
                    transaction_id = '', 
                    payer_name = '', 
                    payer_branch_number = '', 
                    payer_account_number = '', 
                    payer_routing_number = '', 
                    payer_routing_number_ispb = '', 
                    payer_document_number_type = '', 
                    payer_document_number_value = '', 
                    reason = '', 
                    receiver_name = '', 
                    receiver_branch_number = '', 
                    receiver_account_number = '', 
                    receiver_routing_number = '', 
                    receiver_routing_number_ispb = '', 
                    receiver_document_number_type = '', 
                    receiver_document_number_value = '', 
                    payment_method = '', 
                    reference_number = '', 
                    receiver_reference_id = '', 
                    created_at = null, 
                    updated_at = null, ),
                credit_card_metadata_id = '',
                credit_card_metadata = python_core_api_sdk.models.bank_transaction_entity_credit_card_metadata.BankTransactionEntity_creditCardMetadata(
                    id = '', 
                    transaction_id = '', 
                    installment_number = 1.337, 
                    total_installments = 1.337, 
                    total_amount = 1.337, 
                    payee_mcc = 1.337, 
                    card_number = '', 
                    bill_id = '', 
                    created_at = null, 
                    updated_at = null, ),
                ignored_at = None,
                verified_at = None,
                created_at = None,
                updated_at = None
            )
        else:
            return BankTransactionsPageEntityItemsInner(
                id = '',
                account_id = '',
                account = python_core_api_sdk.models.bank_connection_entity_accounts_inner.BankConnectionEntity_accounts_inner(
                    id = '', 
                    bank_connection_id = '', 
                    provider = 'PLUGGY', 
                    provider_account_id = '', 
                    type = 'CHECKING', 
                    enabled = True, 
                    number = '', 
                    balance = 56, 
                    currency_code = '', 
                    name = '', 
                    created_at = null, 
                    updated_at = null, ),
                workspace_id = '',
                provider = 'PLUGGY',
                provider_transaction_id = '',
                original_description = '',
                description = '',
                posted_date = None,
                competency_date = None,
                amount = 56,
                direction_nature = 'CREDIT',
                status = 'PENDING',
                legal_nature = 'PERSONAL',
                tags = [
                    python_core_api_sdk.models.bank_transaction_entity_tags_inner.BankTransactionEntity_tags_inner(
                        id = '', 
                        name = '0', 
                        created_at = null, 
                        updated_at = null, )
                    ],
                created_at = None,
                updated_at = None,
        )
        """

    def testBankTransactionsPageEntityItemsInner(self):
        """Test BankTransactionsPageEntityItemsInner"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
