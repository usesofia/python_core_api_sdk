# coding: utf-8

"""
    Sofia Api

    Api principal do sistema Sofia.

    The version of the OpenAPI document: 0.0.9
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import StrictBool, StrictFloat, StrictInt, StrictStr
from typing import List, Optional, Union
from openapi_client.models.bank_transaction_entity import BankTransactionEntity
from openapi_client.models.bank_transactions_page_entity import BankTransactionsPageEntity
from openapi_client.models.create_or_update_bank_transactions_in_bulk_request_dto import CreateOrUpdateBankTransactionsInBulkRequestDto
from openapi_client.models.update_bank_transaction_request_dto import UpdateBankTransactionRequestDto

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class BankTransactionsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def bank_transactions_controller_create_or_update_bank_transactions_in_bulk(
        self,
        create_or_update_bank_transactions_in_bulk_request_dto: CreateOrUpdateBankTransactionsInBulkRequestDto,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[BankTransactionEntity]:
        """bank_transactions_controller_create_or_update_bank_transactions_in_bulk


        :param create_or_update_bank_transactions_in_bulk_request_dto: (required)
        :type create_or_update_bank_transactions_in_bulk_request_dto: CreateOrUpdateBankTransactionsInBulkRequestDto
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._bank_transactions_controller_create_or_update_bank_transactions_in_bulk_serialize(
            create_or_update_bank_transactions_in_bulk_request_dto=create_or_update_bank_transactions_in_bulk_request_dto,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[BankTransactionEntity]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def bank_transactions_controller_create_or_update_bank_transactions_in_bulk_with_http_info(
        self,
        create_or_update_bank_transactions_in_bulk_request_dto: CreateOrUpdateBankTransactionsInBulkRequestDto,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[BankTransactionEntity]]:
        """bank_transactions_controller_create_or_update_bank_transactions_in_bulk


        :param create_or_update_bank_transactions_in_bulk_request_dto: (required)
        :type create_or_update_bank_transactions_in_bulk_request_dto: CreateOrUpdateBankTransactionsInBulkRequestDto
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._bank_transactions_controller_create_or_update_bank_transactions_in_bulk_serialize(
            create_or_update_bank_transactions_in_bulk_request_dto=create_or_update_bank_transactions_in_bulk_request_dto,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[BankTransactionEntity]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def bank_transactions_controller_create_or_update_bank_transactions_in_bulk_without_preload_content(
        self,
        create_or_update_bank_transactions_in_bulk_request_dto: CreateOrUpdateBankTransactionsInBulkRequestDto,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """bank_transactions_controller_create_or_update_bank_transactions_in_bulk


        :param create_or_update_bank_transactions_in_bulk_request_dto: (required)
        :type create_or_update_bank_transactions_in_bulk_request_dto: CreateOrUpdateBankTransactionsInBulkRequestDto
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._bank_transactions_controller_create_or_update_bank_transactions_in_bulk_serialize(
            create_or_update_bank_transactions_in_bulk_request_dto=create_or_update_bank_transactions_in_bulk_request_dto,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[BankTransactionEntity]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _bank_transactions_controller_create_or_update_bank_transactions_in_bulk_serialize(
        self,
        create_or_update_bank_transactions_in_bulk_request_dto,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if create_or_update_bank_transactions_in_bulk_request_dto is not None:
            _body_params = create_or_update_bank_transactions_in_bulk_request_dto


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/bank/transactions/bulk',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def bank_transactions_controller_get_bank_transactions(
        self,
        workspace_id: StrictStr,
        page_index: Optional[Union[StrictFloat, StrictInt]] = None,
        page_size: Optional[Union[StrictFloat, StrictInt]] = None,
        account_ids: Optional[StrictStr] = None,
        category_ids: Optional[StrictStr] = None,
        tag_ids: Optional[StrictStr] = None,
        legal_natures: Optional[StrictStr] = None,
        types: Optional[StrictStr] = None,
        min_posted_date: Optional[StrictStr] = None,
        max_posted_date: Optional[StrictStr] = None,
        min_competency_date: Optional[StrictStr] = None,
        max_competency_date: Optional[StrictStr] = None,
        show_ignored: Optional[StrictBool] = None,
        ignore_automatic_application_related: Optional[StrictBool] = None,
        ignore_internal_transfers: Optional[StrictBool] = None,
        ignore_invoice_related: Optional[StrictBool] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> BankTransactionsPageEntity:
        """bank_transactions_controller_get_bank_transactions


        :param workspace_id: (required)
        :type workspace_id: str
        :param page_index:
        :type page_index: float
        :param page_size:
        :type page_size: float
        :param account_ids:
        :type account_ids: str
        :param category_ids:
        :type category_ids: str
        :param tag_ids:
        :type tag_ids: str
        :param legal_natures:
        :type legal_natures: str
        :param types:
        :type types: str
        :param min_posted_date:
        :type min_posted_date: str
        :param max_posted_date:
        :type max_posted_date: str
        :param min_competency_date:
        :type min_competency_date: str
        :param max_competency_date:
        :type max_competency_date: str
        :param show_ignored:
        :type show_ignored: bool
        :param ignore_automatic_application_related:
        :type ignore_automatic_application_related: bool
        :param ignore_internal_transfers:
        :type ignore_internal_transfers: bool
        :param ignore_invoice_related:
        :type ignore_invoice_related: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._bank_transactions_controller_get_bank_transactions_serialize(
            workspace_id=workspace_id,
            page_index=page_index,
            page_size=page_size,
            account_ids=account_ids,
            category_ids=category_ids,
            tag_ids=tag_ids,
            legal_natures=legal_natures,
            types=types,
            min_posted_date=min_posted_date,
            max_posted_date=max_posted_date,
            min_competency_date=min_competency_date,
            max_competency_date=max_competency_date,
            show_ignored=show_ignored,
            ignore_automatic_application_related=ignore_automatic_application_related,
            ignore_internal_transfers=ignore_internal_transfers,
            ignore_invoice_related=ignore_invoice_related,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BankTransactionsPageEntity",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def bank_transactions_controller_get_bank_transactions_with_http_info(
        self,
        workspace_id: StrictStr,
        page_index: Optional[Union[StrictFloat, StrictInt]] = None,
        page_size: Optional[Union[StrictFloat, StrictInt]] = None,
        account_ids: Optional[StrictStr] = None,
        category_ids: Optional[StrictStr] = None,
        tag_ids: Optional[StrictStr] = None,
        legal_natures: Optional[StrictStr] = None,
        types: Optional[StrictStr] = None,
        min_posted_date: Optional[StrictStr] = None,
        max_posted_date: Optional[StrictStr] = None,
        min_competency_date: Optional[StrictStr] = None,
        max_competency_date: Optional[StrictStr] = None,
        show_ignored: Optional[StrictBool] = None,
        ignore_automatic_application_related: Optional[StrictBool] = None,
        ignore_internal_transfers: Optional[StrictBool] = None,
        ignore_invoice_related: Optional[StrictBool] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[BankTransactionsPageEntity]:
        """bank_transactions_controller_get_bank_transactions


        :param workspace_id: (required)
        :type workspace_id: str
        :param page_index:
        :type page_index: float
        :param page_size:
        :type page_size: float
        :param account_ids:
        :type account_ids: str
        :param category_ids:
        :type category_ids: str
        :param tag_ids:
        :type tag_ids: str
        :param legal_natures:
        :type legal_natures: str
        :param types:
        :type types: str
        :param min_posted_date:
        :type min_posted_date: str
        :param max_posted_date:
        :type max_posted_date: str
        :param min_competency_date:
        :type min_competency_date: str
        :param max_competency_date:
        :type max_competency_date: str
        :param show_ignored:
        :type show_ignored: bool
        :param ignore_automatic_application_related:
        :type ignore_automatic_application_related: bool
        :param ignore_internal_transfers:
        :type ignore_internal_transfers: bool
        :param ignore_invoice_related:
        :type ignore_invoice_related: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._bank_transactions_controller_get_bank_transactions_serialize(
            workspace_id=workspace_id,
            page_index=page_index,
            page_size=page_size,
            account_ids=account_ids,
            category_ids=category_ids,
            tag_ids=tag_ids,
            legal_natures=legal_natures,
            types=types,
            min_posted_date=min_posted_date,
            max_posted_date=max_posted_date,
            min_competency_date=min_competency_date,
            max_competency_date=max_competency_date,
            show_ignored=show_ignored,
            ignore_automatic_application_related=ignore_automatic_application_related,
            ignore_internal_transfers=ignore_internal_transfers,
            ignore_invoice_related=ignore_invoice_related,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BankTransactionsPageEntity",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def bank_transactions_controller_get_bank_transactions_without_preload_content(
        self,
        workspace_id: StrictStr,
        page_index: Optional[Union[StrictFloat, StrictInt]] = None,
        page_size: Optional[Union[StrictFloat, StrictInt]] = None,
        account_ids: Optional[StrictStr] = None,
        category_ids: Optional[StrictStr] = None,
        tag_ids: Optional[StrictStr] = None,
        legal_natures: Optional[StrictStr] = None,
        types: Optional[StrictStr] = None,
        min_posted_date: Optional[StrictStr] = None,
        max_posted_date: Optional[StrictStr] = None,
        min_competency_date: Optional[StrictStr] = None,
        max_competency_date: Optional[StrictStr] = None,
        show_ignored: Optional[StrictBool] = None,
        ignore_automatic_application_related: Optional[StrictBool] = None,
        ignore_internal_transfers: Optional[StrictBool] = None,
        ignore_invoice_related: Optional[StrictBool] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """bank_transactions_controller_get_bank_transactions


        :param workspace_id: (required)
        :type workspace_id: str
        :param page_index:
        :type page_index: float
        :param page_size:
        :type page_size: float
        :param account_ids:
        :type account_ids: str
        :param category_ids:
        :type category_ids: str
        :param tag_ids:
        :type tag_ids: str
        :param legal_natures:
        :type legal_natures: str
        :param types:
        :type types: str
        :param min_posted_date:
        :type min_posted_date: str
        :param max_posted_date:
        :type max_posted_date: str
        :param min_competency_date:
        :type min_competency_date: str
        :param max_competency_date:
        :type max_competency_date: str
        :param show_ignored:
        :type show_ignored: bool
        :param ignore_automatic_application_related:
        :type ignore_automatic_application_related: bool
        :param ignore_internal_transfers:
        :type ignore_internal_transfers: bool
        :param ignore_invoice_related:
        :type ignore_invoice_related: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._bank_transactions_controller_get_bank_transactions_serialize(
            workspace_id=workspace_id,
            page_index=page_index,
            page_size=page_size,
            account_ids=account_ids,
            category_ids=category_ids,
            tag_ids=tag_ids,
            legal_natures=legal_natures,
            types=types,
            min_posted_date=min_posted_date,
            max_posted_date=max_posted_date,
            min_competency_date=min_competency_date,
            max_competency_date=max_competency_date,
            show_ignored=show_ignored,
            ignore_automatic_application_related=ignore_automatic_application_related,
            ignore_internal_transfers=ignore_internal_transfers,
            ignore_invoice_related=ignore_invoice_related,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BankTransactionsPageEntity",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _bank_transactions_controller_get_bank_transactions_serialize(
        self,
        workspace_id,
        page_index,
        page_size,
        account_ids,
        category_ids,
        tag_ids,
        legal_natures,
        types,
        min_posted_date,
        max_posted_date,
        min_competency_date,
        max_competency_date,
        show_ignored,
        ignore_automatic_application_related,
        ignore_internal_transfers,
        ignore_invoice_related,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if workspace_id is not None:
            _path_params['workspaceId'] = workspace_id
        # process the query parameters
        if page_index is not None:
            
            _query_params.append(('pageIndex', page_index))
            
        if page_size is not None:
            
            _query_params.append(('pageSize', page_size))
            
        if account_ids is not None:
            
            _query_params.append(('accountIds', account_ids))
            
        if category_ids is not None:
            
            _query_params.append(('categoryIds', category_ids))
            
        if tag_ids is not None:
            
            _query_params.append(('tagIds', tag_ids))
            
        if legal_natures is not None:
            
            _query_params.append(('legalNatures', legal_natures))
            
        if types is not None:
            
            _query_params.append(('types', types))
            
        if min_posted_date is not None:
            
            _query_params.append(('minPostedDate', min_posted_date))
            
        if max_posted_date is not None:
            
            _query_params.append(('maxPostedDate', max_posted_date))
            
        if min_competency_date is not None:
            
            _query_params.append(('minCompetencyDate', min_competency_date))
            
        if max_competency_date is not None:
            
            _query_params.append(('maxCompetencyDate', max_competency_date))
            
        if show_ignored is not None:
            
            _query_params.append(('showIgnored', show_ignored))
            
        if ignore_automatic_application_related is not None:
            
            _query_params.append(('ignoreAutomaticApplicationRelated', ignore_automatic_application_related))
            
        if ignore_internal_transfers is not None:
            
            _query_params.append(('ignoreInternalTransfers', ignore_internal_transfers))
            
        if ignore_invoice_related is not None:
            
            _query_params.append(('ignoreInvoiceRelated', ignore_invoice_related))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/workspaces/{workspaceId}/bank/transactions',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def bank_transactions_controller_get_bank_transactions_confirmed_today_by_me(
        self,
        workspace_id: StrictStr,
        page_index: Optional[Union[StrictFloat, StrictInt]] = None,
        page_size: Optional[Union[StrictFloat, StrictInt]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> BankTransactionsPageEntity:
        """bank_transactions_controller_get_bank_transactions_confirmed_today_by_me


        :param workspace_id: (required)
        :type workspace_id: str
        :param page_index:
        :type page_index: float
        :param page_size:
        :type page_size: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._bank_transactions_controller_get_bank_transactions_confirmed_today_by_me_serialize(
            workspace_id=workspace_id,
            page_index=page_index,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BankTransactionsPageEntity",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def bank_transactions_controller_get_bank_transactions_confirmed_today_by_me_with_http_info(
        self,
        workspace_id: StrictStr,
        page_index: Optional[Union[StrictFloat, StrictInt]] = None,
        page_size: Optional[Union[StrictFloat, StrictInt]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[BankTransactionsPageEntity]:
        """bank_transactions_controller_get_bank_transactions_confirmed_today_by_me


        :param workspace_id: (required)
        :type workspace_id: str
        :param page_index:
        :type page_index: float
        :param page_size:
        :type page_size: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._bank_transactions_controller_get_bank_transactions_confirmed_today_by_me_serialize(
            workspace_id=workspace_id,
            page_index=page_index,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BankTransactionsPageEntity",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def bank_transactions_controller_get_bank_transactions_confirmed_today_by_me_without_preload_content(
        self,
        workspace_id: StrictStr,
        page_index: Optional[Union[StrictFloat, StrictInt]] = None,
        page_size: Optional[Union[StrictFloat, StrictInt]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """bank_transactions_controller_get_bank_transactions_confirmed_today_by_me


        :param workspace_id: (required)
        :type workspace_id: str
        :param page_index:
        :type page_index: float
        :param page_size:
        :type page_size: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._bank_transactions_controller_get_bank_transactions_confirmed_today_by_me_serialize(
            workspace_id=workspace_id,
            page_index=page_index,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BankTransactionsPageEntity",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _bank_transactions_controller_get_bank_transactions_confirmed_today_by_me_serialize(
        self,
        workspace_id,
        page_index,
        page_size,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if workspace_id is not None:
            _path_params['workspaceId'] = workspace_id
        # process the query parameters
        if page_index is not None:
            
            _query_params.append(('pageIndex', page_index))
            
        if page_size is not None:
            
            _query_params.append(('pageSize', page_size))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/workspaces/{workspaceId}/bank/transactions/confirmed-today-by-me',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def bank_transactions_controller_get_bank_transactions_not_confirmed(
        self,
        workspace_id: StrictStr,
        page_index: Optional[Union[StrictFloat, StrictInt]] = None,
        page_size: Optional[Union[StrictFloat, StrictInt]] = None,
        consider_ignored: Optional[StrictBool] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> BankTransactionsPageEntity:
        """bank_transactions_controller_get_bank_transactions_not_confirmed


        :param workspace_id: (required)
        :type workspace_id: str
        :param page_index:
        :type page_index: float
        :param page_size:
        :type page_size: float
        :param consider_ignored:
        :type consider_ignored: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._bank_transactions_controller_get_bank_transactions_not_confirmed_serialize(
            workspace_id=workspace_id,
            page_index=page_index,
            page_size=page_size,
            consider_ignored=consider_ignored,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BankTransactionsPageEntity",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def bank_transactions_controller_get_bank_transactions_not_confirmed_with_http_info(
        self,
        workspace_id: StrictStr,
        page_index: Optional[Union[StrictFloat, StrictInt]] = None,
        page_size: Optional[Union[StrictFloat, StrictInt]] = None,
        consider_ignored: Optional[StrictBool] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[BankTransactionsPageEntity]:
        """bank_transactions_controller_get_bank_transactions_not_confirmed


        :param workspace_id: (required)
        :type workspace_id: str
        :param page_index:
        :type page_index: float
        :param page_size:
        :type page_size: float
        :param consider_ignored:
        :type consider_ignored: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._bank_transactions_controller_get_bank_transactions_not_confirmed_serialize(
            workspace_id=workspace_id,
            page_index=page_index,
            page_size=page_size,
            consider_ignored=consider_ignored,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BankTransactionsPageEntity",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def bank_transactions_controller_get_bank_transactions_not_confirmed_without_preload_content(
        self,
        workspace_id: StrictStr,
        page_index: Optional[Union[StrictFloat, StrictInt]] = None,
        page_size: Optional[Union[StrictFloat, StrictInt]] = None,
        consider_ignored: Optional[StrictBool] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """bank_transactions_controller_get_bank_transactions_not_confirmed


        :param workspace_id: (required)
        :type workspace_id: str
        :param page_index:
        :type page_index: float
        :param page_size:
        :type page_size: float
        :param consider_ignored:
        :type consider_ignored: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._bank_transactions_controller_get_bank_transactions_not_confirmed_serialize(
            workspace_id=workspace_id,
            page_index=page_index,
            page_size=page_size,
            consider_ignored=consider_ignored,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BankTransactionsPageEntity",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _bank_transactions_controller_get_bank_transactions_not_confirmed_serialize(
        self,
        workspace_id,
        page_index,
        page_size,
        consider_ignored,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if workspace_id is not None:
            _path_params['workspaceId'] = workspace_id
        # process the query parameters
        if page_index is not None:
            
            _query_params.append(('pageIndex', page_index))
            
        if page_size is not None:
            
            _query_params.append(('pageSize', page_size))
            
        if consider_ignored is not None:
            
            _query_params.append(('considerIgnored', consider_ignored))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/workspaces/{workspaceId}/bank/transactions/not-confirmed',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def bank_transactions_controller_get_bank_transactions_totals(
        self,
        workspace_id: StrictStr,
        account_ids: Optional[StrictStr] = None,
        category_ids: Optional[StrictStr] = None,
        tag_ids: Optional[StrictStr] = None,
        legal_natures: Optional[StrictStr] = None,
        min_posted_date: Optional[StrictStr] = None,
        max_posted_date: Optional[StrictStr] = None,
        min_competency_date: Optional[StrictStr] = None,
        max_competency_date: Optional[StrictStr] = None,
        show_ignored: Optional[StrictBool] = None,
        ignore_automatic_application_related: Optional[StrictBool] = None,
        ignore_internal_transfers: Optional[StrictBool] = None,
        ignore_invoice_related: Optional[StrictBool] = None,
        types: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> BankTransactionsPageEntity:
        """bank_transactions_controller_get_bank_transactions_totals


        :param workspace_id: (required)
        :type workspace_id: str
        :param account_ids:
        :type account_ids: str
        :param category_ids:
        :type category_ids: str
        :param tag_ids:
        :type tag_ids: str
        :param legal_natures:
        :type legal_natures: str
        :param min_posted_date:
        :type min_posted_date: str
        :param max_posted_date:
        :type max_posted_date: str
        :param min_competency_date:
        :type min_competency_date: str
        :param max_competency_date:
        :type max_competency_date: str
        :param show_ignored:
        :type show_ignored: bool
        :param ignore_automatic_application_related:
        :type ignore_automatic_application_related: bool
        :param ignore_internal_transfers:
        :type ignore_internal_transfers: bool
        :param ignore_invoice_related:
        :type ignore_invoice_related: bool
        :param types:
        :type types: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._bank_transactions_controller_get_bank_transactions_totals_serialize(
            workspace_id=workspace_id,
            account_ids=account_ids,
            category_ids=category_ids,
            tag_ids=tag_ids,
            legal_natures=legal_natures,
            min_posted_date=min_posted_date,
            max_posted_date=max_posted_date,
            min_competency_date=min_competency_date,
            max_competency_date=max_competency_date,
            show_ignored=show_ignored,
            ignore_automatic_application_related=ignore_automatic_application_related,
            ignore_internal_transfers=ignore_internal_transfers,
            ignore_invoice_related=ignore_invoice_related,
            types=types,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BankTransactionsPageEntity",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def bank_transactions_controller_get_bank_transactions_totals_with_http_info(
        self,
        workspace_id: StrictStr,
        account_ids: Optional[StrictStr] = None,
        category_ids: Optional[StrictStr] = None,
        tag_ids: Optional[StrictStr] = None,
        legal_natures: Optional[StrictStr] = None,
        min_posted_date: Optional[StrictStr] = None,
        max_posted_date: Optional[StrictStr] = None,
        min_competency_date: Optional[StrictStr] = None,
        max_competency_date: Optional[StrictStr] = None,
        show_ignored: Optional[StrictBool] = None,
        ignore_automatic_application_related: Optional[StrictBool] = None,
        ignore_internal_transfers: Optional[StrictBool] = None,
        ignore_invoice_related: Optional[StrictBool] = None,
        types: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[BankTransactionsPageEntity]:
        """bank_transactions_controller_get_bank_transactions_totals


        :param workspace_id: (required)
        :type workspace_id: str
        :param account_ids:
        :type account_ids: str
        :param category_ids:
        :type category_ids: str
        :param tag_ids:
        :type tag_ids: str
        :param legal_natures:
        :type legal_natures: str
        :param min_posted_date:
        :type min_posted_date: str
        :param max_posted_date:
        :type max_posted_date: str
        :param min_competency_date:
        :type min_competency_date: str
        :param max_competency_date:
        :type max_competency_date: str
        :param show_ignored:
        :type show_ignored: bool
        :param ignore_automatic_application_related:
        :type ignore_automatic_application_related: bool
        :param ignore_internal_transfers:
        :type ignore_internal_transfers: bool
        :param ignore_invoice_related:
        :type ignore_invoice_related: bool
        :param types:
        :type types: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._bank_transactions_controller_get_bank_transactions_totals_serialize(
            workspace_id=workspace_id,
            account_ids=account_ids,
            category_ids=category_ids,
            tag_ids=tag_ids,
            legal_natures=legal_natures,
            min_posted_date=min_posted_date,
            max_posted_date=max_posted_date,
            min_competency_date=min_competency_date,
            max_competency_date=max_competency_date,
            show_ignored=show_ignored,
            ignore_automatic_application_related=ignore_automatic_application_related,
            ignore_internal_transfers=ignore_internal_transfers,
            ignore_invoice_related=ignore_invoice_related,
            types=types,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BankTransactionsPageEntity",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def bank_transactions_controller_get_bank_transactions_totals_without_preload_content(
        self,
        workspace_id: StrictStr,
        account_ids: Optional[StrictStr] = None,
        category_ids: Optional[StrictStr] = None,
        tag_ids: Optional[StrictStr] = None,
        legal_natures: Optional[StrictStr] = None,
        min_posted_date: Optional[StrictStr] = None,
        max_posted_date: Optional[StrictStr] = None,
        min_competency_date: Optional[StrictStr] = None,
        max_competency_date: Optional[StrictStr] = None,
        show_ignored: Optional[StrictBool] = None,
        ignore_automatic_application_related: Optional[StrictBool] = None,
        ignore_internal_transfers: Optional[StrictBool] = None,
        ignore_invoice_related: Optional[StrictBool] = None,
        types: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """bank_transactions_controller_get_bank_transactions_totals


        :param workspace_id: (required)
        :type workspace_id: str
        :param account_ids:
        :type account_ids: str
        :param category_ids:
        :type category_ids: str
        :param tag_ids:
        :type tag_ids: str
        :param legal_natures:
        :type legal_natures: str
        :param min_posted_date:
        :type min_posted_date: str
        :param max_posted_date:
        :type max_posted_date: str
        :param min_competency_date:
        :type min_competency_date: str
        :param max_competency_date:
        :type max_competency_date: str
        :param show_ignored:
        :type show_ignored: bool
        :param ignore_automatic_application_related:
        :type ignore_automatic_application_related: bool
        :param ignore_internal_transfers:
        :type ignore_internal_transfers: bool
        :param ignore_invoice_related:
        :type ignore_invoice_related: bool
        :param types:
        :type types: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._bank_transactions_controller_get_bank_transactions_totals_serialize(
            workspace_id=workspace_id,
            account_ids=account_ids,
            category_ids=category_ids,
            tag_ids=tag_ids,
            legal_natures=legal_natures,
            min_posted_date=min_posted_date,
            max_posted_date=max_posted_date,
            min_competency_date=min_competency_date,
            max_competency_date=max_competency_date,
            show_ignored=show_ignored,
            ignore_automatic_application_related=ignore_automatic_application_related,
            ignore_internal_transfers=ignore_internal_transfers,
            ignore_invoice_related=ignore_invoice_related,
            types=types,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BankTransactionsPageEntity",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _bank_transactions_controller_get_bank_transactions_totals_serialize(
        self,
        workspace_id,
        account_ids,
        category_ids,
        tag_ids,
        legal_natures,
        min_posted_date,
        max_posted_date,
        min_competency_date,
        max_competency_date,
        show_ignored,
        ignore_automatic_application_related,
        ignore_internal_transfers,
        ignore_invoice_related,
        types,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if workspace_id is not None:
            _path_params['workspaceId'] = workspace_id
        # process the query parameters
        if account_ids is not None:
            
            _query_params.append(('accountIds', account_ids))
            
        if category_ids is not None:
            
            _query_params.append(('categoryIds', category_ids))
            
        if tag_ids is not None:
            
            _query_params.append(('tagIds', tag_ids))
            
        if legal_natures is not None:
            
            _query_params.append(('legalNatures', legal_natures))
            
        if min_posted_date is not None:
            
            _query_params.append(('minPostedDate', min_posted_date))
            
        if max_posted_date is not None:
            
            _query_params.append(('maxPostedDate', max_posted_date))
            
        if min_competency_date is not None:
            
            _query_params.append(('minCompetencyDate', min_competency_date))
            
        if max_competency_date is not None:
            
            _query_params.append(('maxCompetencyDate', max_competency_date))
            
        if show_ignored is not None:
            
            _query_params.append(('showIgnored', show_ignored))
            
        if ignore_automatic_application_related is not None:
            
            _query_params.append(('ignoreAutomaticApplicationRelated', ignore_automatic_application_related))
            
        if ignore_internal_transfers is not None:
            
            _query_params.append(('ignoreInternalTransfers', ignore_internal_transfers))
            
        if ignore_invoice_related is not None:
            
            _query_params.append(('ignoreInvoiceRelated', ignore_invoice_related))
            
        if types is not None:
            
            _query_params.append(('types', types))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/workspaces/{workspaceId}/bank/transactions/totals',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def bank_transactions_controller_get_recent(
        self,
        workspace_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[BankTransactionEntity]:
        """bank_transactions_controller_get_recent


        :param workspace_id: (required)
        :type workspace_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._bank_transactions_controller_get_recent_serialize(
            workspace_id=workspace_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[BankTransactionEntity]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def bank_transactions_controller_get_recent_with_http_info(
        self,
        workspace_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[BankTransactionEntity]]:
        """bank_transactions_controller_get_recent


        :param workspace_id: (required)
        :type workspace_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._bank_transactions_controller_get_recent_serialize(
            workspace_id=workspace_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[BankTransactionEntity]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def bank_transactions_controller_get_recent_without_preload_content(
        self,
        workspace_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """bank_transactions_controller_get_recent


        :param workspace_id: (required)
        :type workspace_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._bank_transactions_controller_get_recent_serialize(
            workspace_id=workspace_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[BankTransactionEntity]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _bank_transactions_controller_get_recent_serialize(
        self,
        workspace_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if workspace_id is not None:
            _path_params['workspaceId'] = workspace_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/workspaces/{workspaceId}/bank/transactions/most-recent',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def bank_transactions_controller_get_transaction_details(
        self,
        bank_transaction_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> BankTransactionEntity:
        """bank_transactions_controller_get_transaction_details


        :param bank_transaction_id: (required)
        :type bank_transaction_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._bank_transactions_controller_get_transaction_details_serialize(
            bank_transaction_id=bank_transaction_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BankTransactionEntity",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def bank_transactions_controller_get_transaction_details_with_http_info(
        self,
        bank_transaction_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[BankTransactionEntity]:
        """bank_transactions_controller_get_transaction_details


        :param bank_transaction_id: (required)
        :type bank_transaction_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._bank_transactions_controller_get_transaction_details_serialize(
            bank_transaction_id=bank_transaction_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BankTransactionEntity",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def bank_transactions_controller_get_transaction_details_without_preload_content(
        self,
        bank_transaction_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """bank_transactions_controller_get_transaction_details


        :param bank_transaction_id: (required)
        :type bank_transaction_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._bank_transactions_controller_get_transaction_details_serialize(
            bank_transaction_id=bank_transaction_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BankTransactionEntity",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _bank_transactions_controller_get_transaction_details_serialize(
        self,
        bank_transaction_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if bank_transaction_id is not None:
            _path_params['bankTransactionId'] = bank_transaction_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/bank/transactions/{bankTransactionId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def bank_transactions_controller_update_transaction(
        self,
        bank_transaction_id: StrictStr,
        update_bank_transaction_request_dto: UpdateBankTransactionRequestDto,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> BankTransactionEntity:
        """bank_transactions_controller_update_transaction


        :param bank_transaction_id: (required)
        :type bank_transaction_id: str
        :param update_bank_transaction_request_dto: (required)
        :type update_bank_transaction_request_dto: UpdateBankTransactionRequestDto
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._bank_transactions_controller_update_transaction_serialize(
            bank_transaction_id=bank_transaction_id,
            update_bank_transaction_request_dto=update_bank_transaction_request_dto,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BankTransactionEntity",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def bank_transactions_controller_update_transaction_with_http_info(
        self,
        bank_transaction_id: StrictStr,
        update_bank_transaction_request_dto: UpdateBankTransactionRequestDto,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[BankTransactionEntity]:
        """bank_transactions_controller_update_transaction


        :param bank_transaction_id: (required)
        :type bank_transaction_id: str
        :param update_bank_transaction_request_dto: (required)
        :type update_bank_transaction_request_dto: UpdateBankTransactionRequestDto
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._bank_transactions_controller_update_transaction_serialize(
            bank_transaction_id=bank_transaction_id,
            update_bank_transaction_request_dto=update_bank_transaction_request_dto,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BankTransactionEntity",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def bank_transactions_controller_update_transaction_without_preload_content(
        self,
        bank_transaction_id: StrictStr,
        update_bank_transaction_request_dto: UpdateBankTransactionRequestDto,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """bank_transactions_controller_update_transaction


        :param bank_transaction_id: (required)
        :type bank_transaction_id: str
        :param update_bank_transaction_request_dto: (required)
        :type update_bank_transaction_request_dto: UpdateBankTransactionRequestDto
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._bank_transactions_controller_update_transaction_serialize(
            bank_transaction_id=bank_transaction_id,
            update_bank_transaction_request_dto=update_bank_transaction_request_dto,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BankTransactionEntity",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _bank_transactions_controller_update_transaction_serialize(
        self,
        bank_transaction_id,
        update_bank_transaction_request_dto,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if bank_transaction_id is not None:
            _path_params['bankTransactionId'] = bank_transaction_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if update_bank_transaction_request_dto is not None:
            _body_params = update_bank_transaction_request_dto


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/bank/transactions/{bankTransactionId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


