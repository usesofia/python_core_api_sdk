# coding: utf-8

"""
    Sofia Api

    Api principal do sistema Sofia.

    The version of the OpenAPI document: 0.0.9
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List
from openapi_client.models.subscription_product_entity import SubscriptionProductEntity
from typing import Optional, Set
from typing_extensions import Self

class WorkspaceSubscriptionEntity(BaseModel):
    """
    WorkspaceSubscriptionEntity
    """ # noqa: E501
    id: StrictStr
    workspace_id: StrictStr = Field(alias="workspaceId")
    subscription_product_id: StrictStr = Field(alias="subscriptionProductId")
    subscription_product: SubscriptionProductEntity = Field(alias="subscriptionProduct")
    status: StrictStr
    payment_system: StrictStr = Field(alias="paymentSystem")
    payment_system_subscription_id: StrictStr = Field(alias="paymentSystemSubscriptionId")
    created_at: datetime = Field(alias="createdAt")
    __properties: ClassVar[List[str]] = ["id", "workspaceId", "subscriptionProductId", "subscriptionProduct", "status", "paymentSystem", "paymentSystemSubscriptionId", "createdAt"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['ACTIVE', 'NOT_ACTIVE', 'TRIAL']):
            raise ValueError("must be one of enum values ('ACTIVE', 'NOT_ACTIVE', 'TRIAL')")
        return value

    @field_validator('payment_system')
    def payment_system_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['STRIPE']):
            raise ValueError("must be one of enum values ('STRIPE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WorkspaceSubscriptionEntity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of subscription_product
        if self.subscription_product:
            _dict['subscriptionProduct'] = self.subscription_product.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WorkspaceSubscriptionEntity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "workspaceId": obj.get("workspaceId"),
            "subscriptionProductId": obj.get("subscriptionProductId"),
            "subscriptionProduct": SubscriptionProductEntity.from_dict(obj["subscriptionProduct"]) if obj.get("subscriptionProduct") is not None else None,
            "status": obj.get("status"),
            "paymentSystem": obj.get("paymentSystem"),
            "paymentSystemSubscriptionId": obj.get("paymentSystemSubscriptionId"),
            "createdAt": obj.get("createdAt")
        })
        return _obj


